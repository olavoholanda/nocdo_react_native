9bc939ba4fce87de672265d8b729930d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var ImageStylePropTypes = require("../Image/ImageStylePropTypes");

var TextStylePropTypes = require("../Text/TextStylePropTypes");

var ViewStylePropTypes = require("../Components/View/ViewStylePropTypes");

var invariant = require('fbjs/lib/invariant');

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    (0, _classCallCheck2.default)(this, StyleSheetValidation);
  }

  (0, _createClass2.default)(StyleSheetValidation, null, [{
    key: "validateStyleProp",
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }

      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }

      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: "validateStyle",
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }

      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: "addValidStylePropTypes",
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};
StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
module.exports = StyleSheetValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0eWxlU2hlZXRWYWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJTdHlsZVNoZWV0VmFsaWRhdGlvbiIsInByb3AiLCJzdHlsZSIsImNhbGxlciIsIl9fREVWX18iLCJhbGxTdHlsZVByb3BUeXBlcyIsInVuZGVmaW5lZCIsIm1lc3NhZ2UxIiwibWVzc2FnZTIiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJzdHlsZUVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwibmFtZSIsInN0eWxlcyIsInZhbGlkYXRlU3R5bGVQcm9wIiwic3R5bGVQcm9wVHlwZXMiLCJrZXkiLCJhZGRWYWxpZFN0eWxlUHJvcFR5cGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBRUEsSUFBTUEsbUJBQW1CLEdBQUdDLE9BQU8sZ0NBQW5DOztBQUNBLElBQU1DLGtCQUFrQixHQUFHRCxPQUFPLDhCQUFsQzs7QUFDQSxJQUFNRSxrQkFBa0IsR0FBR0YsT0FBTyx5Q0FBbEM7O0FBRUEsSUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsb0JBQUQsQ0FBekI7O0FBTUEsSUFBTUksb0JBQW9CLEdBQUcsOENBQTdCOztJQUVNQyxvQjs7Ozs7OztzQ0FDcUJDLEksRUFBY0MsSyxFQUFlQyxNLEVBQWdCO0FBQ3BFLFVBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1o7QUFDRDs7QUFDRCxVQUFJQyxpQkFBaUIsQ0FBQ0osSUFBRCxDQUFqQixLQUE0QkssU0FBaEMsRUFBMkM7QUFDekMsWUFBTUMsUUFBUSxHQUFHLE1BQU1OLElBQU4sR0FBYSxrQ0FBOUI7QUFDQSxZQUFNTyxRQUFRLEdBQ1osMEJBQ0FDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxNQUFNLENBQUNDLElBQVAsQ0FBWVAsaUJBQVosRUFBK0JRLElBQS9CLEVBQWYsRUFBc0QsSUFBdEQsRUFBNEQsSUFBNUQsQ0FGRjtBQUdBQyxRQUFBQSxVQUFVLENBQUNQLFFBQUQsRUFBV0wsS0FBWCxFQUFrQkMsTUFBbEIsRUFBMEJLLFFBQTFCLENBQVY7QUFDRDs7QUFDRCxVQUFNTyxLQUFLLEdBQUdWLGlCQUFpQixDQUFDSixJQUFELENBQWpCLENBQ1pDLEtBRFksRUFFWkQsSUFGWSxFQUdaRSxNQUhZLEVBSVosTUFKWSxFQUtaLElBTFksRUFNWkosb0JBTlksQ0FBZDs7QUFRQSxVQUFJZ0IsS0FBSixFQUFXO0FBQ1RELFFBQUFBLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFQLEVBQWdCZCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBVjtBQUNEO0FBQ0Y7OztrQ0FFb0JjLEksRUFBY0MsTSxFQUFnQjtBQUNqRCxVQUFJLENBQUNkLE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBQ0QsV0FBSyxJQUFNSCxJQUFYLElBQW1CaUIsTUFBTSxDQUFDRCxJQUFELENBQXpCLEVBQWlDO0FBQy9CakIsUUFBQUEsb0JBQW9CLENBQUNtQixpQkFBckIsQ0FDRWxCLElBREYsRUFFRWlCLE1BQU0sQ0FBQ0QsSUFBRCxDQUZSLEVBR0UsZ0JBQWdCQSxJQUhsQjtBQUtEO0FBQ0Y7OzsyQ0FFNkJHLGMsRUFBZ0I7QUFDNUMsV0FBSyxJQUFNQyxHQUFYLElBQWtCRCxjQUFsQixFQUFrQztBQUNoQ2YsUUFBQUEsaUJBQWlCLENBQUNnQixHQUFELENBQWpCLEdBQXlCRCxjQUFjLENBQUNDLEdBQUQsQ0FBdkM7QUFDRDtBQUNGOzs7OztBQUdILElBQU1QLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNQLFFBQVQsRUFBbUJMLEtBQW5CLEVBQTBCQyxNQUExQixFQUFtQ0ssUUFBbkMsRUFBOEM7QUFDL0RWLEVBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVBTLFFBQVEsR0FDTixJQURGLElBRUdKLE1BQU0sSUFBSSxhQUZiLElBR0UsSUFIRixHQUlFTSxJQUFJLENBQUNDLFNBQUwsQ0FBZVIsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUpGLElBS0dNLFFBQVEsSUFBSSxFQUxmLENBRk8sQ0FBVDtBQVNELENBVkQ7O0FBWUEsSUFBTUgsaUJBQWlCLEdBQUcsRUFBMUI7QUFFQUwsb0JBQW9CLENBQUNzQixzQkFBckIsQ0FBNEM1QixtQkFBNUM7QUFDQU0sb0JBQW9CLENBQUNzQixzQkFBckIsQ0FBNEMxQixrQkFBNUM7QUFDQUksb0JBQW9CLENBQUNzQixzQkFBckIsQ0FBNEN6QixrQkFBNUM7QUFFQTBCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9JbWFnZS9JbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9UZXh0L1RleHRTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgVmlld1N0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLy8gSGFyZGNvZGVkIGJlY2F1c2UgdGhpcyBpcyBhIGxlZ2l0IGNhc2UgYnV0IHdlIGRvbid0IHdhbnQgdG8gbG9hZCBpdCBmcm9tXG4vLyBhIHByaXZhdGUgQVBJLiBXZSBtaWdodCBsaWtlbHkgd2FudCB0byB1bmlmeSBzdHlsZSBzaGVldCBjcmVhdGlvbiB3aXRoIGhvdyBpdFxuLy8gaXMgZG9uZSBpbiB0aGUgRE9NIHNvIHRoaXMgbWlnaHQgbW92ZSBpbnRvIFJlYWN0LiBJIGtub3cgd2hhdCBJJ20gZG9pbmcgc29cbi8vIHBseiBkb24ndCBmaXJlIG1lLlxuY29uc3QgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5jbGFzcyBTdHlsZVNoZWV0VmFsaWRhdGlvbiB7XG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlUHJvcChwcm9wOiBzdHJpbmcsIHN0eWxlOiBPYmplY3QsIGNhbGxlcjogc3RyaW5nKSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhbGxTdHlsZVByb3BUeXBlc1twcm9wXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBtZXNzYWdlMSA9ICdcIicgKyBwcm9wICsgJ1wiIGlzIG5vdCBhIHZhbGlkIHN0eWxlIHByb3BlcnR5Lic7XG4gICAgICBjb25zdCBtZXNzYWdlMiA9XG4gICAgICAgICdcXG5WYWxpZCBzdHlsZSBwcm9wczogJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGFsbFN0eWxlUHJvcFR5cGVzKS5zb3J0KCksIG51bGwsICcgICcpO1xuICAgICAgc3R5bGVFcnJvcihtZXNzYWdlMSwgc3R5bGUsIGNhbGxlciwgbWVzc2FnZTIpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IGFsbFN0eWxlUHJvcFR5cGVzW3Byb3BdKFxuICAgICAgc3R5bGUsXG4gICAgICBwcm9wLFxuICAgICAgY2FsbGVyLFxuICAgICAgJ3Byb3AnLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0UHJvcFR5cGVzU2VjcmV0LFxuICAgICk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzdHlsZUVycm9yKGVycm9yLm1lc3NhZ2UsIHN0eWxlLCBjYWxsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlKG5hbWU6IHN0cmluZywgc3R5bGVzOiBPYmplY3QpIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHN0eWxlc1tuYW1lXSkge1xuICAgICAgU3R5bGVTaGVldFZhbGlkYXRpb24udmFsaWRhdGVTdHlsZVByb3AoXG4gICAgICAgIHByb3AsXG4gICAgICAgIHN0eWxlc1tuYW1lXSxcbiAgICAgICAgJ1N0eWxlU2hlZXQgJyArIG5hbWUsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhZGRWYWxpZFN0eWxlUHJvcFR5cGVzKHN0eWxlUHJvcFR5cGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVQcm9wVHlwZXMpIHtcbiAgICAgIGFsbFN0eWxlUHJvcFR5cGVzW2tleV0gPSBzdHlsZVByb3BUeXBlc1trZXldO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzdHlsZUVycm9yID0gZnVuY3Rpb24obWVzc2FnZTEsIHN0eWxlLCBjYWxsZXI/LCBtZXNzYWdlMj8pIHtcbiAgaW52YXJpYW50KFxuICAgIGZhbHNlLFxuICAgIG1lc3NhZ2UxICtcbiAgICAgICdcXG4nICtcbiAgICAgIChjYWxsZXIgfHwgJzw8dW5rbm93bj4+JykgK1xuICAgICAgJzogJyArXG4gICAgICBKU09OLnN0cmluZ2lmeShzdHlsZSwgbnVsbCwgJyAgJykgK1xuICAgICAgKG1lc3NhZ2UyIHx8ICcnKSxcbiAgKTtcbn07XG5cbmNvbnN0IGFsbFN0eWxlUHJvcFR5cGVzID0ge307XG5cblN0eWxlU2hlZXRWYWxpZGF0aW9uLmFkZFZhbGlkU3R5bGVQcm9wVHlwZXMoSW1hZ2VTdHlsZVByb3BUeXBlcyk7XG5TdHlsZVNoZWV0VmFsaWRhdGlvbi5hZGRWYWxpZFN0eWxlUHJvcFR5cGVzKFRleHRTdHlsZVByb3BUeXBlcyk7XG5TdHlsZVNoZWV0VmFsaWRhdGlvbi5hZGRWYWxpZFN0eWxlUHJvcFR5cGVzKFZpZXdTdHlsZVByb3BUeXBlcyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3R5bGVTaGVldFZhbGlkYXRpb247XG4iXX0=