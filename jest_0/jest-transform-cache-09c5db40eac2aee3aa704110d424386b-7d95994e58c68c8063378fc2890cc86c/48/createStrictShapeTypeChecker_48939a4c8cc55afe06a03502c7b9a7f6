771f8c8af32456f1b3349e863e6f9dc1
'use strict';

var invariant = require('fbjs/lib/invariant');

var merge = require("../vendor/core/merge");

function createStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }

      return;
    }

    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';

    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }

    var allKeys = merge(props[propName], shapeTypes);

    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    for (var _key2 in allKeys) {
      var checker = shapeTypes[_key2];

      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }

      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));

      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }

  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
      rest[_key3 - 4] = arguments[_key3];
    }

    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = createStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsIm1lcmdlIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsInJlc3QiLCJrZXkiLCJjaGVja2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXpCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyx3QkFBckI7O0FBRUEsU0FBU0UsNEJBQVQsQ0FBc0NDLFVBQXRDLEVBRW1DO0FBQ2pDLFdBQVNDLFNBQVQsQ0FDRUMsVUFERixFQUVFQyxLQUZGLEVBR0VDLFFBSEYsRUFJRUMsYUFKRixFQUtFQyxRQUxGLEVBT0U7QUFDQSxRQUFJLENBQUNILEtBQUssQ0FBQ0MsUUFBRCxDQUFWLEVBQXNCO0FBQ3BCLFVBQUlGLFVBQUosRUFBZ0I7QUFDZE4sUUFBQUEsU0FBUyxDQUNQLEtBRE8sRUFFUCxzQkFBcUJRLFFBQXJCLHNDQUNPQyxhQURQLFFBRk8sQ0FBVDtBQUtEOztBQUNEO0FBQ0Q7O0FBQ0QsUUFBTUUsU0FBUyxHQUFHSixLQUFLLENBQUNDLFFBQUQsQ0FBdkI7QUFDQSxRQUFNSSxRQUFRLEdBQUcsT0FBT0QsU0FBeEI7QUFDQSxRQUFNRSxZQUFZLEdBQUdILFFBQVEsSUFBSSxXQUFqQzs7QUFDQSxRQUFJRSxRQUFRLEtBQUssUUFBakIsRUFBMkI7QUFDekJaLE1BQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVAsYUFBV2EsWUFBWCxVQUE2QkwsUUFBN0IsbUJBQXFESSxRQUFyRCw2QkFDbUJILGFBRG5CLDJCQUZPLENBQVQ7QUFLRDs7QUFHRCxRQUFNSyxPQUFPLEdBQUdaLEtBQUssQ0FBQ0ssS0FBSyxDQUFDQyxRQUFELENBQU4sRUFBa0JKLFVBQWxCLENBQXJCOztBQXZCQSxzQ0FER1csSUFDSDtBQURHQSxNQUFBQSxJQUNIO0FBQUE7O0FBd0JBLFNBQUssSUFBTUMsS0FBWCxJQUFrQkYsT0FBbEIsRUFBMkI7QUFDekIsVUFBTUcsT0FBTyxHQUFHYixVQUFVLENBQUNZLEtBQUQsQ0FBMUI7O0FBQ0EsVUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDWmpCLFFBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVAsbUJBQWlCUSxRQUFqQixjQUFtQ1EsS0FBbkMsdUJBQTBEUCxhQUExRCxVQUNFLGdCQURGLEdBRUVTLElBQUksQ0FBQ0MsU0FBTCxDQUFlWixLQUFLLENBQUNDLFFBQUQsQ0FBcEIsRUFBZ0MsSUFBaEMsRUFBc0MsSUFBdEMsQ0FGRixHQUdFLGdCQUhGLEdBSUVVLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxNQUFNLENBQUNDLElBQVAsQ0FBWWpCLFVBQVosQ0FBZixFQUF3QyxJQUF4QyxFQUE4QyxJQUE5QyxDQU5LLENBQVQ7QUFRRDs7QUFDRCxVQUFNa0IsS0FBSyxHQUFHTCxPQUFPLE1BQVAsVUFBUU4sU0FBUixFQUFtQkssS0FBbkIsRUFBd0JQLGFBQXhCLEVBQXVDQyxRQUF2QyxTQUFvREssSUFBcEQsRUFBZDs7QUFDQSxVQUFJTyxLQUFKLEVBQVc7QUFDVHRCLFFBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVBzQixLQUFLLENBQUNDLE9BQU4sR0FDRSxnQkFERixHQUVFTCxJQUFJLENBQUNDLFNBQUwsQ0FBZVosS0FBSyxDQUFDQyxRQUFELENBQXBCLEVBQWdDLElBQWhDLEVBQXNDLElBQXRDLENBSkssQ0FBVDtBQU1EO0FBQ0Y7QUFDRjs7QUFDRCxXQUFTZ0IsZ0JBQVQsQ0FDRWpCLEtBREYsRUFFRUMsUUFGRixFQUdFQyxhQUhGLEVBSUVDLFFBSkYsRUFNVTtBQUFBLHVDQURMSyxJQUNLO0FBRExBLE1BQUFBLElBQ0s7QUFBQTs7QUFDUixXQUFPVixTQUFTLE1BQVQsVUFBVSxLQUFWLEVBQWlCRSxLQUFqQixFQUF3QkMsUUFBeEIsRUFBa0NDLGFBQWxDLEVBQWlEQyxRQUFqRCxTQUE4REssSUFBOUQsRUFBUDtBQUNEOztBQUNEUyxFQUFBQSxnQkFBZ0IsQ0FBQ2xCLFVBQWpCLEdBQThCRCxTQUFTLENBQUNvQixJQUFWLENBQWUsSUFBZixFQUFxQixJQUFyQixDQUE5QjtBQUNBLFNBQU9ELGdCQUFQO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLDRCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuY29uc3QgbWVyZ2UgPSByZXF1aXJlKCcuLi92ZW5kb3IvY29yZS9tZXJnZScpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXM6IHtcbiAgW2tleTogc3RyaW5nXTogUmVhY3RQcm9wc0NoZWNrVHlwZSxcbn0pOiBSZWFjdFByb3BzQ2hhaW5hYmxlVHlwZUNoZWNrZXIge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoXG4gICAgaXNSZXF1aXJlZCxcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uPyxcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICAgIGBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBjb25zdCBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgY29uc3QgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAvLyBwcm9wcy5cbiAgICBjb25zdCBhbGxLZXlzID0gbWVyZ2UocHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICBjb25zdCBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgSW52YWxpZCBwcm9wcy4ke3Byb3BOYW1lfSBrZXkgXFxgJHtrZXl9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYCArXG4gICAgICAgICAgICAnXFxuQmFkIG9iamVjdDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNoYWluZWRDaGVja1R5cGUoXG4gICAgcHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9LFxuICAgIHByb3BOYW1lOiBzdHJpbmcsXG4gICAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICAgIGxvY2F0aW9uPzogc3RyaW5nLFxuICAgIC4uLnJlc3RcbiAgKTogP0Vycm9yIHtcbiAgICByZXR1cm4gY2hlY2tUeXBlKGZhbHNlLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgfVxuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcjtcbiJdfQ==