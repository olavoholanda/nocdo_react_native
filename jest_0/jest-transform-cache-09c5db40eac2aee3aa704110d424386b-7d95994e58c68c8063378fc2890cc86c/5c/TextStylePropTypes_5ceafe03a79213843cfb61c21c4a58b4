110db72d8387260b6e40ac45bd351c6c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var ColorPropType = require("../StyleSheet/ColorPropType");

var ReactPropTypes = require('prop-types');

var ViewStylePropTypes = require("../Components/View/ViewStylePropTypes");

var TextStylePropTypes = (0, _objectSpread2.default)({}, ViewStylePropTypes, {
  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: ColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});
module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiY29sb3IiLCJmb250RmFtaWx5Iiwic3RyaW5nIiwiZm9udFNpemUiLCJudW1iZXIiLCJmb250U3R5bGUiLCJvbmVPZiIsImZvbnRXZWlnaHQiLCJmb250VmFyaWFudCIsImFycmF5T2YiLCJ0ZXh0U2hhZG93T2Zmc2V0Iiwic2hhcGUiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiLCJ0ZXh0U2hhZG93Q29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRBbGlnblZlcnRpY2FsIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwiYm9vbCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGV4dFRyYW5zZm9ybSIsIndyaXRpbmdEaXJlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLCtCQUE3Qjs7QUFDQSxJQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUNBLElBQU1FLGtCQUFrQixHQUFHRixPQUFPLHlDQUFsQzs7QUFFQSxJQUFNRyxrQkFBa0IsbUNBQ25CRCxrQkFEbUI7QUFHdEJFLEVBQUFBLEtBQUssRUFBRUwsYUFIZTtBQUl0Qk0sRUFBQUEsVUFBVSxFQUFFSixjQUFjLENBQUNLLE1BSkw7QUFLdEJDLEVBQUFBLFFBQVEsRUFBRU4sY0FBYyxDQUFDTyxNQUxIO0FBTXRCQyxFQUFBQSxTQUFTLEVBQUVSLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUFDLFFBQUQsRUFBVyxRQUFYLENBQXJCLENBTlc7QUFZdEJDLEVBQUFBLFVBQVUsRUFBRVYsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQy9CLFFBRCtCLEVBRS9CLE1BRitCLEVBRy9CLEtBSCtCLEVBSS9CLEtBSitCLEVBSy9CLEtBTCtCLEVBTS9CLEtBTitCLEVBTy9CLEtBUCtCLEVBUS9CLEtBUitCLEVBUy9CLEtBVCtCLEVBVS9CLEtBVitCLEVBVy9CLEtBWCtCLENBQXJCLENBWlU7QUE0QnRCRSxFQUFBQSxXQUFXLEVBQUVYLGNBQWMsQ0FBQ1ksT0FBZixDQUNYWixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDbkIsWUFEbUIsRUFFbkIsZUFGbUIsRUFHbkIsYUFIbUIsRUFJbkIsY0FKbUIsRUFLbkIsbUJBTG1CLENBQXJCLENBRFcsQ0E1QlM7QUFxQ3RCSSxFQUFBQSxnQkFBZ0IsRUFBRWIsY0FBYyxDQUFDYyxLQUFmLENBQXFCO0FBQ3JDQyxJQUFBQSxLQUFLLEVBQUVmLGNBQWMsQ0FBQ08sTUFEZTtBQUVyQ1MsSUFBQUEsTUFBTSxFQUFFaEIsY0FBYyxDQUFDTztBQUZjLEdBQXJCLENBckNJO0FBeUN0QlUsRUFBQUEsZ0JBQWdCLEVBQUVqQixjQUFjLENBQUNPLE1BekNYO0FBMEN0QlcsRUFBQUEsZUFBZSxFQUFFcEIsYUExQ0s7QUE4Q3RCcUIsRUFBQUEsYUFBYSxFQUFFbkIsY0FBYyxDQUFDTyxNQTlDUjtBQStDdEJhLEVBQUFBLFVBQVUsRUFBRXBCLGNBQWMsQ0FBQ08sTUEvQ0w7QUFvRHRCYyxFQUFBQSxTQUFTLEVBQUVyQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDOUIsTUFEOEIsRUFFOUIsTUFGOEIsRUFHOUIsT0FIOEIsRUFJOUIsUUFKOEIsRUFLOUIsU0FMOEIsQ0FBckIsQ0FwRFc7QUE4RHRCYSxFQUFBQSxpQkFBaUIsRUFBRXRCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN0QyxNQURzQyxFQUV0QyxLQUZzQyxFQUd0QyxRQUhzQyxFQUl0QyxRQUpzQyxDQUFyQixDQTlERztBQTBFdEJjLEVBQUFBLGtCQUFrQixFQUFFdkIsY0FBYyxDQUFDd0IsSUExRWI7QUEyRXRCQyxFQUFBQSxrQkFBa0IsRUFBRXpCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN2QyxNQUR1QyxFQUV2QyxXQUZ1QyxFQUd2QyxjQUh1QyxFQUl2Qyx3QkFKdUMsQ0FBckIsQ0EzRUU7QUFvRnRCaUIsRUFBQUEsbUJBQW1CLEVBQUUxQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDeEMsT0FEd0MsRUFFeEMsUUFGd0MsRUFHeEMsUUFId0MsRUFJeEMsUUFKd0MsQ0FBckIsQ0FwRkM7QUE2RnRCa0IsRUFBQUEsbUJBQW1CLEVBQUU3QixhQTdGQztBQWlHdEI4QixFQUFBQSxhQUFhLEVBQUU1QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDbEMsTUFEa0MsRUFFbEMsWUFGa0MsRUFHbEMsV0FIa0MsRUFJbEMsV0FKa0MsQ0FBckIsQ0FqR087QUEwR3RCb0IsRUFBQUEsZ0JBQWdCLEVBQUU3QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FBQyxNQUFELEVBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLENBQXJCO0FBMUdJLEVBQXhCO0FBNkdBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29sb3JQcm9wVHlwZSA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1ZpZXcvVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbmNvbnN0IFRleHRTdHlsZVByb3BUeXBlcyA9IHtcbiAgLi4uVmlld1N0eWxlUHJvcFR5cGVzLFxuXG4gIGNvbG9yOiBDb2xvclByb3BUeXBlLFxuICBmb250RmFtaWx5OiBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvbnRTaXplOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGZvbnRTdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoWydub3JtYWwnLCAnaXRhbGljJ10pLFxuICAvKipcbiAgICogU3BlY2lmaWVzIGZvbnQgd2VpZ2h0LiBUaGUgdmFsdWVzICdub3JtYWwnIGFuZCAnYm9sZCcgYXJlIHN1cHBvcnRlZCBmb3JcbiAgICogbW9zdCBmb250cy4gTm90IGFsbCBmb250cyBoYXZlIGEgdmFyaWFudCBmb3IgZWFjaCBvZiB0aGUgbnVtZXJpYyB2YWx1ZXMsXG4gICAqIGluIHRoYXQgY2FzZSB0aGUgY2xvc2VzdCBvbmUgaXMgY2hvc2VuLlxuICAgKi9cbiAgZm9udFdlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub3JtYWwnIC8qZGVmYXVsdCovLFxuICAgICdib2xkJyxcbiAgICAnMTAwJyxcbiAgICAnMjAwJyxcbiAgICAnMzAwJyxcbiAgICAnNDAwJyxcbiAgICAnNTAwJyxcbiAgICAnNjAwJyxcbiAgICAnNzAwJyxcbiAgICAnODAwJyxcbiAgICAnOTAwJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBmb250VmFyaWFudDogUmVhY3RQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnc21hbGwtY2FwcycsXG4gICAgICAnb2xkc3R5bGUtbnVtcycsXG4gICAgICAnbGluaW5nLW51bXMnLFxuICAgICAgJ3RhYnVsYXItbnVtcycsXG4gICAgICAncHJvcG9ydGlvbmFsLW51bXMnLFxuICAgIF0pLFxuICApLFxuICB0ZXh0U2hhZG93T2Zmc2V0OiBSZWFjdFByb3BUeXBlcy5zaGFwZSh7XG4gICAgd2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgfSksXG4gIHRleHRTaGFkb3dSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgdGV4dFNoYWRvd0NvbG9yOiBDb2xvclByb3BUeXBlLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgbGV0dGVyU3BhY2luZzogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBsaW5lSGVpZ2h0OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGV4dCBhbGlnbm1lbnQuIFRoZSB2YWx1ZSAnanVzdGlmeScgaXMgb25seSBzdXBwb3J0ZWQgb24gaU9TIGFuZFxuICAgKiBmYWxsYmFja3MgdG8gYGxlZnRgIG9uIEFuZHJvaWQuXG4gICAqL1xuICB0ZXh0QWxpZ246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ2xlZnQnLFxuICAgICdyaWdodCcsXG4gICAgJ2NlbnRlcicsXG4gICAgJ2p1c3RpZnknLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICB0ZXh0QWxpZ25WZXJ0aWNhbDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdhdXRvJyAvKmRlZmF1bHQqLyxcbiAgICAndG9wJyxcbiAgICAnYm90dG9tJyxcbiAgICAnY2VudGVyJyxcbiAgXSksXG4gIC8qKlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byByZW1vdmUgZXh0cmEgZm9udCBwYWRkaW5nIGludGVuZGVkIHRvIG1ha2Ugc3BhY2UgZm9yIGNlcnRhaW4gYXNjZW5kZXJzIC8gZGVzY2VuZGVycy5cbiAgICogV2l0aCBzb21lIGZvbnRzLCB0aGlzIHBhZGRpbmcgY2FuIG1ha2UgdGV4dCBsb29rIHNsaWdodGx5IG1pc2FsaWduZWQgd2hlbiBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgKiBGb3IgYmVzdCByZXN1bHRzIGFsc28gc2V0IGB0ZXh0QWxpZ25WZXJ0aWNhbGAgdG8gYGNlbnRlcmAuIERlZmF1bHQgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGluY2x1ZGVGb250UGFkZGluZzogUmVhY3RQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dERlY29yYXRpb25MaW5lOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vbmUnIC8qZGVmYXVsdCovLFxuICAgICd1bmRlcmxpbmUnLFxuICAgICdsaW5lLXRocm91Z2gnLFxuICAgICd1bmRlcmxpbmUgbGluZS10aHJvdWdoJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0RGVjb3JhdGlvblN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ3NvbGlkJyAvKmRlZmF1bHQqLyxcbiAgICAnZG91YmxlJyxcbiAgICAnZG90dGVkJyxcbiAgICAnZGFzaGVkJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBDb2xvclByb3BUeXBlLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dFRyYW5zZm9ybTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAnY2FwaXRhbGl6ZScsXG4gICAgJ3VwcGVyY2FzZScsXG4gICAgJ2xvd2VyY2FzZScsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgd3JpdGluZ0RpcmVjdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoWydhdXRvJyAvKmRlZmF1bHQqLywgJ2x0cicsICdydGwnXSksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRTdHlsZVByb3BUeXBlcztcbiJdfQ==