df2732c9e7d30d19fb5af3096171bb87
"use strict";

var mergeInto = require("./mergeInto");

var merge = function merge(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlLmpzIl0sIm5hbWVzIjpbIm1lcmdlSW50byIsInJlcXVpcmUiLCJtZXJnZSIsIm9uZSIsInR3byIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQThCQTs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sZUFBdkI7O0FBU0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQzdCLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0FMLEVBQUFBLFNBQVMsQ0FBQ0ssTUFBRCxFQUFTRixHQUFULENBQVQ7QUFDQUgsRUFBQUEsU0FBUyxDQUFDSyxNQUFELEVBQVNELEdBQVQsQ0FBVDtBQUNBLFNBQU9DLE1BQVA7QUFDRCxDQUxEOztBQU9BQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZ2VuZXJhdGVkIFNpZ25lZFNvdXJjZTw8MTQ4ZDE5NzRmOTRmNWM5NTk3ZTg2Zjk0NmJkZjBkNGU+PlxuICpcbiAqICEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISFcbiAqICEhIFRoaXMgZmlsZSBpcyBhIGNoZWNrLWluIG9mIGEgc3RhdGljX3Vwc3RyZWFtIHByb2plY3QhICAgICAgISFcbiAqICEhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISFcbiAqICEhIFlvdSBzaG91bGQgbm90IG1vZGlmeSB0aGlzIGZpbGUgZGlyZWN0bHkuIEluc3RlYWQ6ICAgICAgICAgISFcbiAqICEhIDEpIFVzZSBgZmpzIHVzZS11cHN0cmVhbWAgdG8gdGVtcG9yYXJpbHkgcmVwbGFjZSB0aGlzIHdpdGggISFcbiAqICEhICAgIHRoZSBsYXRlc3QgdmVyc2lvbiBmcm9tIHVwc3RyZWFtLiAgICAgICAgICAgICAgICAgICAgICAgISFcbiAqICEhIDIpIE1ha2UgeW91ciBjaGFuZ2VzLCB0ZXN0IHRoZW0sIGV0Yy4gICAgICAgICAgICAgICAgICAgICAgISFcbiAqICEhIDMpIFVzZSBgZmpzIHB1c2gtdXBzdHJlYW1gIHRvIGNvcHkgeW91ciBjaGFuZ2VzIGJhY2sgdG8gICAgISFcbiAqICEhICAgIHN0YXRpY191cHN0cmVhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISFcbiAqICEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVyZ2VJbnRvID0gcmVxdWlyZSgnLi9tZXJnZUludG8nKTtcblxuLyoqXG4gKiBTaGFsbG93IG1lcmdlcyB0d28gc3RydWN0dXJlcyBpbnRvIGEgcmV0dXJuIHZhbHVlLCB3aXRob3V0IG11dGF0aW5nIGVpdGhlci5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9uZSBPcHRpb25hbCBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIHRvIG1lcmdlIGZyb20uXG4gKiBAcGFyYW0gez9vYmplY3R9IHR3byBPcHRpb25hbCBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIHRvIG1lcmdlIGZyb20uXG4gKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBzaGFsbG93IGV4dGVuc2lvbiBvZiBvbmUgYnkgdHdvLlxuICovXG52YXIgbWVyZ2UgPSBmdW5jdGlvbihvbmUsIHR3bykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIG1lcmdlSW50byhyZXN1bHQsIG9uZSk7XG4gIG1lcmdlSW50byhyZXN1bHQsIHR3byk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIl19