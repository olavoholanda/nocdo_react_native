bcda24eec1fabbb427c7c188345ef745
'use strict';

var Platform = require("./Platform");

var TVEventHandler = require("../Components/AppleTV/TVEventHandler");

function emptyFunction() {}

var BackHandler;

if (Platform.isTV) {
  var _tvEventHandler = new TVEventHandler();

  var _backPressSubscriptions = new Set();

  _tvEventHandler.enable(this, function (cmp, evt) {
    if (evt && evt.eventType === 'menu') {
      var invokeDefault = true;
      var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

      for (var i = 0; i < subscriptions.length; ++i) {
        if (subscriptions[i]()) {
          invokeDefault = false;
          break;
        }
      }

      if (invokeDefault) {
        BackHandler.exitApp();
      }
    }
  });

  BackHandler = {
    exitApp: emptyFunction,
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
} else {
  BackHandler = {
    exitApp: emptyFunction,
    addEventListener: function addEventListener() {
      return {
        remove: emptyFunction
      };
    },
    removeEventListener: emptyFunction
  };
}

module.exports = BackHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhY2tIYW5kbGVyLmlvcy5qcyJdLCJuYW1lcyI6WyJQbGF0Zm9ybSIsInJlcXVpcmUiLCJUVkV2ZW50SGFuZGxlciIsImVtcHR5RnVuY3Rpb24iLCJCYWNrSGFuZGxlciIsImlzVFYiLCJfdHZFdmVudEhhbmRsZXIiLCJfYmFja1ByZXNzU3Vic2NyaXB0aW9ucyIsIlNldCIsImVuYWJsZSIsImNtcCIsImV2dCIsImV2ZW50VHlwZSIsImludm9rZURlZmF1bHQiLCJzdWJzY3JpcHRpb25zIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwicmV2ZXJzZSIsImkiLCJsZW5ndGgiLCJleGl0QXBwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJhZGQiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVsZXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBWUE7O0FBRUEsSUFBTUEsUUFBUSxHQUFHQyxPQUFPLGNBQXhCOztBQUNBLElBQU1DLGNBQWMsR0FBR0QsT0FBTyx3Q0FBOUI7O0FBTUEsU0FBU0UsYUFBVCxHQUF5QixDQUFFOztBQWdDM0IsSUFBSUMsV0FBSjs7QUFFQSxJQUFJSixRQUFRLENBQUNLLElBQWIsRUFBbUI7QUFDakIsTUFBTUMsZUFBZSxHQUFHLElBQUlKLGNBQUosRUFBeEI7O0FBQ0EsTUFBTUssdUJBQXVCLEdBQUcsSUFBSUMsR0FBSixFQUFoQzs7QUFFQUYsRUFBQUEsZUFBZSxDQUFDRyxNQUFoQixDQUF1QixJQUF2QixFQUE2QixVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDOUMsUUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFNBQUosS0FBa0IsTUFBN0IsRUFBcUM7QUFDbkMsVUFBSUMsYUFBYSxHQUFHLElBQXBCO0FBQ0EsVUFBTUMsYUFBYSxHQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FDcEJULHVCQUF1QixDQUFDVSxNQUF4QixFQURvQixFQUVwQkMsT0FGb0IsRUFBdEI7O0FBSUEsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxhQUFhLENBQUNNLE1BQWxDLEVBQTBDLEVBQUVELENBQTVDLEVBQStDO0FBQzdDLFlBQUlMLGFBQWEsQ0FBQ0ssQ0FBRCxDQUFiLEVBQUosRUFBd0I7QUFDdEJOLFVBQUFBLGFBQWEsR0FBRyxLQUFoQjtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJQSxhQUFKLEVBQW1CO0FBQ2pCVCxRQUFBQSxXQUFXLENBQUNpQixPQUFaO0FBQ0Q7QUFDRjtBQUNGLEdBbEJEOztBQW9CQWpCLEVBQUFBLFdBQVcsR0FBRztBQUNaaUIsSUFBQUEsT0FBTyxFQUFFbEIsYUFERztBQUdabUIsSUFBQUEsZ0JBQWdCLEVBQUUsMEJBQ2hCQyxTQURnQixFQUVoQkMsT0FGZ0IsRUFHTTtBQUN0QmpCLE1BQUFBLHVCQUF1QixDQUFDa0IsR0FBeEIsQ0FBNEJELE9BQTVCOztBQUNBLGFBQU87QUFDTEUsUUFBQUEsTUFBTSxFQUFFO0FBQUEsaUJBQU10QixXQUFXLENBQUN1QixtQkFBWixDQUFnQ0osU0FBaEMsRUFBMkNDLE9BQTNDLENBQU47QUFBQTtBQURILE9BQVA7QUFHRCxLQVhXO0FBYVpHLElBQUFBLG1CQUFtQixFQUFFLDZCQUNuQkosU0FEbUIsRUFFbkJDLE9BRm1CLEVBR2I7QUFDTmpCLE1BQUFBLHVCQUF1QixDQUFDcUIsTUFBeEIsQ0FBK0JKLE9BQS9CO0FBQ0Q7QUFsQlcsR0FBZDtBQW9CRCxDQTVDRCxNQTRDTztBQUNMcEIsRUFBQUEsV0FBVyxHQUFHO0FBQ1ppQixJQUFBQSxPQUFPLEVBQUVsQixhQURHO0FBRVptQixJQUFBQSxnQkFGWSw4QkFFTztBQUNqQixhQUFPO0FBQ0xJLFFBQUFBLE1BQU0sRUFBRXZCO0FBREgsT0FBUDtBQUdELEtBTlc7QUFPWndCLElBQUFBLG1CQUFtQixFQUFFeEI7QUFQVCxHQUFkO0FBU0Q7O0FBRUQwQixNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogT24gQXBwbGUgVFYsIHRoaXMgaW1wbGVtZW50cyBiYWNrIG5hdmlnYXRpb24gdXNpbmcgdGhlIFRWIHJlbW90ZSdzIG1lbnUgYnV0dG9uLlxuICogT24gaU9TLCB0aGlzIGp1c3QgaW1wbGVtZW50cyBhIHN0dWIuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuL1BsYXRmb3JtJyk7XG5jb25zdCBUVkV2ZW50SGFuZGxlciA9IHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvQXBwbGVUVi9UVkV2ZW50SGFuZGxlcicpO1xuXG50eXBlIEJhY2tQcmVzc0V2ZW50TmFtZSA9ICRFbnVtPHtcbiAgYmFja1ByZXNzOiBzdHJpbmcsXG59PjtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbi8qKlxuICogRGV0ZWN0IGhhcmR3YXJlIGJ1dHRvbiBwcmVzc2VzIGZvciBiYWNrIG5hdmlnYXRpb24uXG4gKlxuICogQW5kcm9pZDogRGV0ZWN0IGhhcmR3YXJlIGJhY2sgYnV0dG9uIHByZXNzZXMsIGFuZCBwcm9ncmFtbWF0aWNhbGx5IGludm9rZSB0aGUgZGVmYXVsdCBiYWNrIGJ1dHRvblxuICogZnVuY3Rpb25hbGl0eSB0byBleGl0IHRoZSBhcHAgaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycyBvciBpZiBub25lIG9mIHRoZSBsaXN0ZW5lcnMgcmV0dXJuIHRydWUuXG4gKlxuICogdHZPUzogRGV0ZWN0IHByZXNzZXMgb2YgdGhlIG1lbnUgYnV0dG9uIG9uIHRoZSBUViByZW1vdGUuICAoU3RpbGwgdG8gYmUgaW1wbGVtZW50ZWQ6XG4gKiBwcm9ncmFtbWF0aWNhbGx5IGRpc2FibGUgbWVudSBidXR0b24gaGFuZGxpbmdcbiAqIGZ1bmN0aW9uYWxpdHkgdG8gZXhpdCB0aGUgYXBwIGlmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMgb3IgaWYgbm9uZSBvZiB0aGUgbGlzdGVuZXJzIHJldHVybiB0cnVlLilcbiAqXG4gKiBpT1M6IE5vdCBhcHBsaWNhYmxlLlxuICpcbiAqIFRoZSBldmVudCBzdWJzY3JpcHRpb25zIGFyZSBjYWxsZWQgaW4gcmV2ZXJzZSBvcmRlciAoaS5lLiBsYXN0IHJlZ2lzdGVyZWQgc3Vic2NyaXB0aW9uIGZpcnN0KSxcbiAqIGFuZCBpZiBvbmUgc3Vic2NyaXB0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIHN1YnNjcmlwdGlvbnMgcmVnaXN0ZXJlZCBlYXJsaWVyIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIEJhY2tIYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2hhcmR3YXJlQmFja1ByZXNzJywgZnVuY3Rpb24oKSB7XG4gKiAgLy8gdGhpcy5vbk1haW5TY3JlZW4gYW5kIHRoaXMuZ29CYWNrIGFyZSBqdXN0IGV4YW1wbGVzLCB5b3UgbmVlZCB0byB1c2UgeW91ciBvd24gaW1wbGVtZW50YXRpb24gaGVyZVxuICogIC8vIFR5cGljYWxseSB5b3Ugd291bGQgdXNlIHRoZSBuYXZpZ2F0b3IgaGVyZSB0byBnbyB0byB0aGUgbGFzdCBzdGF0ZS5cbiAqXG4gKiAgaWYgKCF0aGlzLm9uTWFpblNjcmVlbigpKSB7XG4gKiAgICB0aGlzLmdvQmFjaygpO1xuICogICAgcmV0dXJuIHRydWU7XG4gKiAgfVxuICogIHJldHVybiBmYWxzZTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmxldCBCYWNrSGFuZGxlcjtcblxuaWYgKFBsYXRmb3JtLmlzVFYpIHtcbiAgY29uc3QgX3R2RXZlbnRIYW5kbGVyID0gbmV3IFRWRXZlbnRIYW5kbGVyKCk7XG4gIGNvbnN0IF9iYWNrUHJlc3NTdWJzY3JpcHRpb25zID0gbmV3IFNldCgpO1xuXG4gIF90dkV2ZW50SGFuZGxlci5lbmFibGUodGhpcywgZnVuY3Rpb24oY21wLCBldnQpIHtcbiAgICBpZiAoZXZ0ICYmIGV2dC5ldmVudFR5cGUgPT09ICdtZW51Jykge1xuICAgICAgbGV0IGludm9rZURlZmF1bHQgPSB0cnVlO1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IEFycmF5LmZyb20oXG4gICAgICAgIF9iYWNrUHJlc3NTdWJzY3JpcHRpb25zLnZhbHVlcygpLFxuICAgICAgKS5yZXZlcnNlKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaXB0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc1tpXSgpKSB7XG4gICAgICAgICAgaW52b2tlRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnZva2VEZWZhdWx0KSB7XG4gICAgICAgIEJhY2tIYW5kbGVyLmV4aXRBcHAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIEJhY2tIYW5kbGVyID0ge1xuICAgIGV4aXRBcHA6IGVtcHR5RnVuY3Rpb24sXG5cbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihcbiAgICAgIGV2ZW50TmFtZTogQmFja1ByZXNzRXZlbnROYW1lLFxuICAgICAgaGFuZGxlcjogRnVuY3Rpb24sXG4gICAgKToge3JlbW92ZTogKCkgPT4gdm9pZH0ge1xuICAgICAgX2JhY2tQcmVzc1N1YnNjcmlwdGlvbnMuYWRkKGhhbmRsZXIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiAoKSA9PiBCYWNrSGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbihcbiAgICAgIGV2ZW50TmFtZTogQmFja1ByZXNzRXZlbnROYW1lLFxuICAgICAgaGFuZGxlcjogRnVuY3Rpb24sXG4gICAgKTogdm9pZCB7XG4gICAgICBfYmFja1ByZXNzU3Vic2NyaXB0aW9ucy5kZWxldGUoaGFuZGxlcik7XG4gICAgfSxcbiAgfTtcbn0gZWxzZSB7XG4gIEJhY2tIYW5kbGVyID0ge1xuICAgIGV4aXRBcHA6IGVtcHR5RnVuY3Rpb24sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvbixcbiAgICAgIH07XG4gICAgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBlbXB0eUZ1bmN0aW9uLFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tIYW5kbGVyO1xuIl19