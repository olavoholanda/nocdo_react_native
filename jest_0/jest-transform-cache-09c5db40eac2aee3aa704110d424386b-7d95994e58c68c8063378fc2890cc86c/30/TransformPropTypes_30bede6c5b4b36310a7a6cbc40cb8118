27ede7b748515d277e7193d6e1f7fa45
'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require("../Utilities/deprecatedPropType");

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
module.exports = TransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zZm9ybVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiLCJEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUiLCJUcmFuc2Zvcm1Qcm9wVHlwZXMiLCJ0cmFuc2Zvcm0iLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJwZXJzcGVjdGl2ZSIsIm51bWJlciIsInJvdGF0ZSIsInN0cmluZyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJza2V3WCIsInNrZXdZIiwidHJhbnNmb3JtTWF0cml4IiwiZGVjb21wb3NlZE1hdHJpeCIsInJvdGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsY0FBYyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUE5Qjs7QUFFQSxJQUFNQyxrQkFBa0IsR0FBR0QsT0FBTyxtQ0FBbEM7O0FBRUEsSUFBTUUsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUM5QkMsS0FEOEIsRUFFOUJDLFFBRjhCLEVBRzlCQyxhQUg4QixFQUl0QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHVEQUNFLDZDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUMsd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUEyQixDQUMvQkosS0FEK0IsRUFFL0JDLFFBRitCLEVBRy9CQyxhQUgrQixFQUl2QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHdEQUNFLGlDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUUsa0JBQWtCLEdBQUc7QUFpQnpCQyxFQUFBQSxTQUFTLEVBQUVWLGNBQWMsQ0FBQ1csT0FBZixDQUNUWCxjQUFjLENBQUNZLFNBQWYsQ0FBeUIsQ0FDdkJaLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDQyxJQUFBQSxXQUFXLEVBQUVkLGNBQWMsQ0FBQ2U7QUFBN0IsR0FBckIsQ0FEdUIsRUFFdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDRyxJQUFBQSxNQUFNLEVBQUVoQixjQUFjLENBQUNpQjtBQUF4QixHQUFyQixDQUZ1QixFQUd2QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDSyxJQUFBQSxPQUFPLEVBQUVsQixjQUFjLENBQUNpQjtBQUF6QixHQUFyQixDQUh1QixFQUl2QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDTSxJQUFBQSxPQUFPLEVBQUVuQixjQUFjLENBQUNpQjtBQUF6QixHQUFyQixDQUp1QixFQUt2QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDTyxJQUFBQSxPQUFPLEVBQUVwQixjQUFjLENBQUNpQjtBQUF6QixHQUFyQixDQUx1QixFQU12QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDUSxJQUFBQSxLQUFLLEVBQUVyQixjQUFjLENBQUNlO0FBQXZCLEdBQXJCLENBTnVCLEVBT3ZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1MsSUFBQUEsTUFBTSxFQUFFdEIsY0FBYyxDQUFDZTtBQUF4QixHQUFyQixDQVB1QixFQVF2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNVLElBQUFBLE1BQU0sRUFBRXZCLGNBQWMsQ0FBQ2U7QUFBeEIsR0FBckIsQ0FSdUIsRUFTdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDVyxJQUFBQSxVQUFVLEVBQUV4QixjQUFjLENBQUNlO0FBQTVCLEdBQXJCLENBVHVCLEVBVXZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1ksSUFBQUEsVUFBVSxFQUFFekIsY0FBYyxDQUFDZTtBQUE1QixHQUFyQixDQVZ1QixFQVd2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNhLElBQUFBLEtBQUssRUFBRTFCLGNBQWMsQ0FBQ2lCO0FBQXZCLEdBQXJCLENBWHVCLEVBWXZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNjLElBQUFBLEtBQUssRUFBRTNCLGNBQWMsQ0FBQ2lCO0FBQXZCLEdBQXJCLENBWnVCLENBQXpCLENBRFMsQ0FqQmM7QUFxQ3pCVyxFQUFBQSxlQUFlLEVBQUV6Qix1QkFyQ1E7QUF5Q3pCMEIsRUFBQUEsZ0JBQWdCLEVBQUVyQix3QkF6Q087QUE0Q3pCYyxFQUFBQSxNQUFNLEVBQUVwQixrQkFBa0IsQ0FDeEJGLGNBQWMsQ0FBQ2UsTUFEUyxFQUV4QixpQ0FGd0IsQ0E1Q0Q7QUFnRHpCUSxFQUFBQSxNQUFNLEVBQUVyQixrQkFBa0IsQ0FDeEJGLGNBQWMsQ0FBQ2UsTUFEUyxFQUV4QixpQ0FGd0IsQ0FoREQ7QUFvRHpCZSxFQUFBQSxRQUFRLEVBQUU1QixrQkFBa0IsQ0FDMUJGLGNBQWMsQ0FBQ2UsTUFEVyxFQUUxQixpQ0FGMEIsQ0FwREg7QUF3RHpCUyxFQUFBQSxVQUFVLEVBQUV0QixrQkFBa0IsQ0FDNUJGLGNBQWMsQ0FBQ2UsTUFEYSxFQUU1QixpQ0FGNEIsQ0F4REw7QUE0RHpCVSxFQUFBQSxVQUFVLEVBQUV2QixrQkFBa0IsQ0FDNUJGLGNBQWMsQ0FBQ2UsTUFEYSxFQUU1QixpQ0FGNEI7QUE1REwsQ0FBM0I7QUFrRUFnQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ2QixrQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxuY29uc3QgZGVwcmVjYXRlZFByb3BUeXBlID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RlcHJlY2F0ZWRQcm9wVHlwZScpO1xuXG5jb25zdCBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSA9IGZ1bmN0aW9uKFxuICBwcm9wczogT2JqZWN0LFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4pOiA/RXJyb3Ige1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICdUaGUgdHJhbnNmb3JtTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFt7IG1hdHJpeDogLi4uIH1dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzOiBPYmplY3QsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbik6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSBkZWNvbXBvc2VkTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFsuLi5dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgVHJhbnNmb3JtUHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogYHRyYW5zZm9ybWAgYWNjZXB0cyBhbiBhcnJheSBvZiB0cmFuc2Zvcm1hdGlvbiBvYmplY3RzLiBFYWNoIG9iamVjdCBzcGVjaWZpZXNcbiAgICogdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSB0cmFuc2Zvcm1lZCBhcyB0aGUga2V5LCBhbmQgdGhlIHZhbHVlIHRvIHVzZSBpbiB0aGVcbiAgICogdHJhbnNmb3JtYXRpb24uIE9iamVjdHMgc2hvdWxkIG5vdCBiZSBjb21iaW5lZC4gVXNlIGEgc2luZ2xlIGtleS92YWx1ZSBwYWlyXG4gICAqIHBlciBvYmplY3QuXG4gICAqXG4gICAqIFRoZSByb3RhdGUgdHJhbnNmb3JtYXRpb25zIHJlcXVpcmUgYSBzdHJpbmcgc28gdGhhdCB0aGUgdHJhbnNmb3JtIG1heSBiZVxuICAgKiBleHByZXNzZWQgaW4gZGVncmVlcyAoZGVnKSBvciByYWRpYW5zIChyYWQpLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYHRyYW5zZm9ybShbeyByb3RhdGVYOiAnNDVkZWcnIH0sIHsgcm90YXRlWjogJzAuNzg1Mzk4cmFkJyB9XSlgXG4gICAqXG4gICAqIFRoZSBza2V3IHRyYW5zZm9ybWF0aW9ucyByZXF1aXJlIGEgc3RyaW5nIHNvIHRoYXQgdGhlIHRyYW5zZm9ybSBtYXkgYmVcbiAgICogZXhwcmVzc2VkIGluIGRlZ3JlZXMgKGRlZykuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgdHJhbnNmb3JtKFt7IHNrZXdYOiAnNDVkZWcnIH1dKWBcbiAgICovXG4gIHRyYW5zZm9ybTogUmVhY3RQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3BlcnNwZWN0aXZlOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGU6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVg6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVk6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVo6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZVg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlWTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7dHJhbnNsYXRlWDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7dHJhbnNsYXRlWTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2tld1g6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NrZXdZOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICBdKSxcbiAgKSxcblxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLlxuICAgKi9cbiAgdHJhbnNmb3JtTWF0cml4OiBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSxcbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQuIFVzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC5cbiAgICovXG4gIGRlY29tcG9zZWRNYXRyaXg6IERlY29tcG9zZWRNYXRyaXhQcm9wVHlwZSxcblxuICAvKiBEZXByZWNhdGVkIHRyYW5zZm9ybSBwcm9wcyB1c2VkIG9uIEFuZHJvaWQgb25seSAqL1xuICBzY2FsZVg6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICBzY2FsZVk6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICByb3RhdGlvbjogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHRyYW5zbGF0ZVg6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICB0cmFuc2xhdGVZOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtUHJvcFR5cGVzO1xuIl19