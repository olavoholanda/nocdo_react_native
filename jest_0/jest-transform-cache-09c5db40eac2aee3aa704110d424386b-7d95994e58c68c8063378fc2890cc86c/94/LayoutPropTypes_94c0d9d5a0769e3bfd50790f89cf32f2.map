{"version":3,"sources":["LayoutPropTypes.js"],"names":["ReactPropTypes","require","LayoutPropTypes","display","oneOf","width","oneOfType","number","string","height","start","end","top","left","right","bottom","minWidth","maxWidth","minHeight","maxHeight","margin","marginVertical","marginHorizontal","marginTop","marginBottom","marginLeft","marginRight","marginStart","marginEnd","padding","paddingVertical","paddingHorizontal","paddingTop","paddingBottom","paddingLeft","paddingRight","paddingStart","paddingEnd","borderWidth","borderTopWidth","borderStartWidth","borderEndWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","position","flexDirection","flexWrap","justifyContent","alignItems","alignSelf","alignContent","overflow","flex","flexGrow","flexShrink","flexBasis","aspectRatio","zIndex","direction","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst ReactPropTypes = require('prop-types');\n\n/**\n * React Native's layout system is based on Flexbox and is powered both\n * on iOS and Android by an open source project called `Yoga`:\n * https://github.com/facebook/yoga\n *\n * The implementation in Yoga is slightly different from what the\n * Flexbox spec defines - for example, we chose more sensible default\n * values. Since our layout docs are generated from the comments in this\n * file, please keep a brief comment describing each prop type.\n *\n * These properties are a subset of our styles that are consumed by the layout\n * algorithm and affect the positioning and sizing of views.\n */\nconst LayoutPropTypes = {\n  /** `display` sets the display type of this component.\n   *\n   *  It works similarly to `display` in CSS, but only support 'flex' and 'none'.\n   *  'flex' is the default.\n   */\n  display: ReactPropTypes.oneOf(['none', 'flex']),\n\n  /** `width` sets the width of this component.\n   *\n   *  It works similarly to `width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/width for more details.\n   */\n  width: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `height` sets the height of this component.\n   *\n   *  It works similarly to `height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/height for more details.\n   */\n  height: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When the direction is `ltr`, `start` is equivalent to `left`.\n   * When the direction is `rtl`, `start` is equivalent to `right`.\n   *\n   * This style takes precedence over the `left`, `right`, and `end` styles.\n   */\n  start: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When the direction is `ltr`, `end` is equivalent to `right`.\n   * When the direction is `rtl`, `end` is equivalent to `left`.\n   *\n   * This style takes precedence over the `left` and `right` styles.\n   */\n  end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),\n\n  /** `top` is the number of logical pixels to offset the top edge of\n   *  this component.\n   *\n   *  It works similarly to `top` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/top\n   *  for more details of how `top` affects layout.\n   */\n  top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),\n\n  /** `left` is the number of logical pixels to offset the left edge of\n   *  this component.\n   *\n   *  It works similarly to `left` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/left\n   *  for more details of how `left` affects layout.\n   */\n  left: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `right` is the number of logical pixels to offset the right edge of\n   *  this component.\n   *\n   *  It works similarly to `right` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/right\n   *  for more details of how `right` affects layout.\n   */\n  right: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `bottom` is the number of logical pixels to offset the bottom edge of\n   *  this component.\n   *\n   *  It works similarly to `bottom` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/bottom\n   *  for more details of how `bottom` affects layout.\n   */\n  bottom: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `minWidth` is the minimum width for this component, in logical pixels.\n   *\n   *  It works similarly to `min-width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/min-width\n   *  for more details.\n   */\n  minWidth: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `maxWidth` is the maximum width for this component, in logical pixels.\n   *\n   *  It works similarly to `max-width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\n   *  for more details.\n   */\n  maxWidth: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `minHeight` is the minimum height for this component, in logical pixels.\n   *\n   *  It works similarly to `min-height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/min-height\n   *  for more details.\n   */\n  minHeight: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `maxHeight` is the maximum height for this component, in logical pixels.\n   *\n   *  It works similarly to `max-height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/max-height\n   *  for more details.\n   */\n  maxHeight: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `margin` has the same effect as setting each of\n   *  `marginTop`, `marginLeft`, `marginBottom`, and `marginRight`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin\n   *  for more details.\n   */\n  margin: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `marginVertical` has the same effect as setting both\n   *  `marginTop` and `marginBottom`.\n   */\n  marginVertical: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `marginHorizontal` has the same effect as setting\n   *  both `marginLeft` and `marginRight`.\n   */\n  marginHorizontal: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `marginTop` works like `margin-top` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top\n   *  for more details.\n   */\n  marginTop: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `marginBottom` works like `margin-bottom` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom\n   *  for more details.\n   */\n  marginBottom: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `marginLeft` works like `margin-left` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left\n   *  for more details.\n   */\n  marginLeft: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `marginRight` works like `margin-right` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right\n   *  for more details.\n   */\n  marginRight: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `padding` has the same effect as setting each of\n   *  `paddingTop`, `paddingBottom`, `paddingLeft`, and `paddingRight`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/padding\n   *  for more details.\n   */\n  padding: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `paddingVertical` is like setting both of\n   *  `paddingTop` and `paddingBottom`.\n   */\n  paddingVertical: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** Setting `paddingHorizontal` is like setting both of\n   *  `paddingLeft` and `paddingRight`.\n   */\n  paddingHorizontal: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `paddingTop` works like `padding-top` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top\n   * for more details.\n   */\n  paddingTop: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `paddingBottom` works like `padding-bottom` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom\n   * for more details.\n   */\n  paddingBottom: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `paddingLeft` works like `padding-left` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left\n   * for more details.\n   */\n  paddingLeft: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `paddingRight` works like `padding-right` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right\n   * for more details.\n   */\n  paddingRight: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /** `borderWidth` works like `border-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-width\n   * for more details.\n   */\n  borderWidth: ReactPropTypes.number,\n\n  /** `borderTopWidth` works like `border-top-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width\n   * for more details.\n   */\n  borderTopWidth: ReactPropTypes.number,\n\n  /**\n   * When direction is `ltr`, `borderStartWidth` is equivalent to `borderLeftWidth`.\n   * When direction is `rtl`, `borderStartWidth` is equivalent to `borderRightWidth`.\n   */\n  borderStartWidth: ReactPropTypes.number,\n\n  /**\n   * When direction is `ltr`, `borderEndWidth` is equivalent to `borderRightWidth`.\n   * When direction is `rtl`, `borderEndWidth` is equivalent to `borderLeftWidth`.\n   */\n  borderEndWidth: ReactPropTypes.number,\n\n  /** `borderRightWidth` works like `border-right-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width\n   * for more details.\n   */\n  borderRightWidth: ReactPropTypes.number,\n\n  /** `borderBottomWidth` works like `border-bottom-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width\n   * for more details.\n   */\n  borderBottomWidth: ReactPropTypes.number,\n\n  /** `borderLeftWidth` works like `border-left-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width\n   * for more details.\n   */\n  borderLeftWidth: ReactPropTypes.number,\n\n  /** `position` in React Native is similar to regular CSS, but\n   *  everything is set to `relative` by default, so `absolute`\n   *  positioning is always just relative to the parent.\n   *\n   *  If you want to position a child using specific numbers of logical\n   *  pixels relative to its parent, set the child to have `absolute`\n   *  position.\n   *\n   *  If you want to position a child relative to something\n   *  that is not its parent, just don't use styles for that. Use the\n   *  component tree.\n   *\n   *  See https://github.com/facebook/yoga\n   *  for more details on how `position` differs between React Native\n   *  and CSS.\n   */\n  position: ReactPropTypes.oneOf(['absolute', 'relative']),\n\n  /** `flexDirection` controls which directions children of a container go.\n   *  `row` goes left to right, `column` goes top to bottom, and you may\n   *  be able to guess what the other two do. It works like `flex-direction`\n   *  in CSS, except the default is `column`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\n   *  for more details.\n   */\n  flexDirection: ReactPropTypes.oneOf([\n    'row',\n    'row-reverse',\n    'column',\n    'column-reverse',\n  ]),\n\n  /** `flexWrap` controls whether children can wrap around after they\n   *  hit the end of a flex container.\n   *  It works like `flex-wrap` in CSS (default: nowrap).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\n   *  for more details.\n   */\n  flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),\n\n  /** `justifyContent` aligns children in the main direction.\n   *  For example, if children are flowing vertically, `justifyContent`\n   *  controls how they align vertically.\n   *  It works like `justify-content` in CSS (default: flex-start).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\n   *  for more details.\n   */\n  justifyContent: ReactPropTypes.oneOf([\n    'flex-start',\n    'flex-end',\n    'center',\n    'space-between',\n    'space-around',\n    'space-evenly',\n  ]),\n\n  /** `alignItems` aligns children in the cross direction.\n   *  For example, if children are flowing vertically, `alignItems`\n   *  controls how they align horizontally.\n   *  It works like `align-items` in CSS (default: stretch).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\n   *  for more details.\n   */\n  alignItems: ReactPropTypes.oneOf([\n    'flex-start',\n    'flex-end',\n    'center',\n    'stretch',\n    'baseline',\n  ]),\n\n  /** `alignSelf` controls how a child aligns in the cross direction,\n   *  overriding the `alignItems` of the parent. It works like `align-self`\n   *  in CSS (default: auto).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\n   *  for more details.\n   */\n  alignSelf: ReactPropTypes.oneOf([\n    'auto',\n    'flex-start',\n    'flex-end',\n    'center',\n    'stretch',\n    'baseline',\n  ]),\n\n  /** `alignContent` controls how rows align in the cross direction,\n   *  overriding the `alignContent` of the parent.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\n   *  for more details.\n   */\n  alignContent: ReactPropTypes.oneOf([\n    'flex-start',\n    'flex-end',\n    'center',\n    'stretch',\n    'space-between',\n    'space-around',\n  ]),\n\n  /** `overflow` controls how children are measured and displayed.\n   *  `overflow: hidden` causes views to be clipped while `overflow: scroll`\n   *  causes views to be measured independently of their parents main axis.\n   *  It works like `overflow` in CSS (default: visible).\n   *  See https://developer.mozilla.org/en/docs/Web/CSS/overflow\n   *  for more details.\n   *  `overflow: visible` only works on iOS. On Android, all views will clip\n   *  their children.\n   */\n  overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),\n\n  /** In React Native `flex` does not work the same way that it does in CSS.\n   *  `flex` is a number rather than a string, and it works\n   *  according to the `Yoga` library\n   *  at https://github.com/facebook/yoga\n   *\n   *  When `flex` is a positive number, it makes the component flexible\n   *  and it will be sized proportional to its flex value. So a\n   *  component with `flex` set to 2 will take twice the space as a\n   *  component with `flex` set to 1.\n   *\n   *  When `flex` is 0, the component is sized according to `width`\n   *  and `height` and it is inflexible.\n   *\n   *  When `flex` is -1, the component is normally sized according\n   *  `width` and `height`. However, if there's not enough space,\n   *  the component will shrink to its `minWidth` and `minHeight`.\n   *\n   * flexGrow, flexShrink, and flexBasis work the same as in CSS.\n   */\n  flex: ReactPropTypes.number,\n  flexGrow: ReactPropTypes.number,\n  flexShrink: ReactPropTypes.number,\n  flexBasis: ReactPropTypes.oneOfType([\n    ReactPropTypes.number,\n    ReactPropTypes.string,\n  ]),\n\n  /**\n   * Aspect ratio control the size of the undefined dimension of a node. Aspect ratio is a\n   * non-standard property only available in react native and not CSS.\n   *\n   * - On a node with a set width/height aspect ratio control the size of the unset dimension\n   * - On a node with a set flex basis aspect ratio controls the size of the node in the cross axis\n   *   if unset\n   * - On a node with a measure function aspect ratio works as though the measure function measures\n   *   the flex basis\n   * - On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis\n   *   if unset\n   * - Aspect ratio takes min/max dimensions into account\n   */\n  aspectRatio: ReactPropTypes.number,\n\n  /** `zIndex` controls which components display on top of others.\n   *  Normally, you don't use `zIndex`. Components render according to\n   *  their order in the document tree, so later components draw over\n   *  earlier ones. `zIndex` may be useful if you have animations or custom\n   *  modal interfaces where you don't want this behavior.\n   *\n   *  It works like the CSS `z-index` property - components with a larger\n   *  `zIndex` will render on top. Think of the z-direction like it's\n   *  pointing from the phone into your eyeball.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/z-index for\n   *  more details.\n   */\n  zIndex: ReactPropTypes.number,\n\n  /** `direction` specifies the directional flow of the user interface.\n   *  The default is `inherit`, except for root node which will have\n   *  value based on the current locale.\n   *  See https://facebook.github.io/yoga/docs/rtl/\n   *  for more details.\n   *  @platform ios\n   */\n  direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl']),\n};\n\nmodule.exports = LayoutPropTypes;\n"]}