6d4624741a4d6c7f5d62300b26ee0f4c
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _color = _interopRequireDefault(require("color"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var _Icon = _interopRequireDefault(require("../Icon"));

var _IconToggle = _interopRequireDefault(require("../IconToggle"));

var _RippleFeedback = _interopRequireDefault(require("../RippleFeedback"));

var _getPlatformElevation = _interopRequireDefault(require("../styles/getPlatformElevation"));

var _withTheme = _interopRequireDefault(require("../styles/withTheme"));

function darkenOrLighten(color) {
  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  var c = (0, _color.default)(color);
  return c.luminosity() > 0.5 ? c.darken(ratio) : c.lighten(ratio);
}

var propTypes = {
  actions: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.arrayOf(_propTypes.default.shape({
    icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
    label: _propTypes.default.string,
    name: _propTypes.default.string
  }))]),
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  hidden: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
  transition: _propTypes.default.oneOf(['toolbar', 'speedDial']),
  rippleColor: _propTypes.default.string,
  style: _propTypes.default.shape({
    container: _utils.ViewPropTypes.style,
    icon: _reactNative.Text.propTypes.style
  })
};
var defaultProps = {
  actions: null,
  onPress: null,
  onLongPress: null,
  transition: null,
  icon: 'add',
  style: {},
  hidden: false,
  rippleColor: null
};

function getStyles(props, state) {
  var size = props.size,
      theme = props.theme;
  var actionButton = theme.actionButton;
  var local = {
    container: {}
  };

  if (size) {
    local.container = {
      height: size,
      width: size,
      borderRadius: size / 2
    };
  }

  local.container = (0, _objectSpread2.default)({}, local.container, (0, _getPlatformElevation.default)(state.elevation));
  return {
    positionContainer: [actionButton.positionContainer, local.positionContainer, props.style.positionContainer],
    toolbarPositionContainer: [actionButton.toolbarPositionContainer, local.toolbarPositionContainer, props.style.toolbarPositionContainer],
    container: [actionButton.container, local.container, props.style.container],
    overlayContainer: [actionButton.overlayContainer, local.overlayContainer, props.style.overlayContainer],
    toolbarContainer: [actionButton.toolbarContainer, local.toolbarContainer, props.style.toolbarContainer],
    toolbarActionContainer: [actionButton.toolbarActionContainer, local.toolbarActionContainer, props.style.toolbarActionContainer],
    speedDialContainer: [actionButton.speedDialContainer, local.speedDialContainer, props.style.speedDialContainer],
    speedDialActionContainer: [actionButton.speedDialActionContainer, local.speedDialActionContainer, props.style.speedDialActionContainer],
    speedDialActionLabel: [actionButton.speedDialActionLabel, local.speedDialActionLabel, props.style.speedDialActionLabel],
    speedDialActionLabelContainer: [actionButton.speedDialActionLabelContainer, local.speedDialActionLabelContainer, props.style.speedDialActionLabelContainer],
    speedDialActionIconContainer: [actionButton.speedDialActionIconContainer, local.speedDialActionIconContainer, props.style.speedDialActionIconContainer],
    speedDialActionIcon: [actionButton.speedDialActionIcon, local.speedDialActionIcon, props.style.speedDialActionIcon],
    icon: [actionButton.icon, local.icon, props.style.icon]
  };
}

var getRippleContainerStyle = function getRippleContainerStyle(containerStyle) {
  var flattenContainer = _reactNative.StyleSheet.flatten(containerStyle);

  var height = flattenContainer.height,
      width = flattenContainer.width,
      borderRadius = flattenContainer.borderRadius;
  return {
    container: {
      height: height,
      width: width,
      borderRadius: borderRadius
    }
  };
};

var ActionButton = function (_PureComponent) {
  (0, _inherits2.default)(ActionButton, _PureComponent);

  function ActionButton(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ActionButton);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ActionButton).call(this, props));

    _this.onPress = function (action) {
      var onPress = _this.props.onPress;

      _this.toggleState();

      if (onPress) {
        onPress(action);
      }
    };

    _this.getActionItemKey = function (_ref) {
      var icon = _ref.icon,
          name = _ref.name;
      var key = icon;

      if (name) {
        key = name;
      } else if (_react.default.isValidElement(icon) && icon.key) {
        key = icon.key;
      }

      return key;
    };

    _this.toggleState = function () {
      var transition = _this.props.transition;
      var render = _this.state.render;

      if (render === 'button') {
        if (transition) {
          _this.setState({
            render: transition
          });
        }
      } else {
        _this.setState({
          render: 'button'
        });
      }
    };

    _this.show = function () {};

    _this.hide = function () {};

    _this.renderToolbarTransition = function (styles) {
      var actions = _this.props.actions;
      return _react.default.createElement(_reactNative.View, {
        style: styles.toolbarPositionContainer
      }, _react.default.createElement(_reactNative.View, {
        key: "main-button",
        style: styles.toolbarContainer
      }, actions.map(function (action) {
        if (typeof action === 'string') {
          return _this.renderToolbarAction(styles, action);
        }

        if (_react.default.isValidElement(action)) {
          return _this.renderToolbarElementAction(styles, action);
        }

        var icon = action.icon,
            label = action.label,
            name = action.name;
        return _this.renderToolbarLabelAction(styles, icon, label, name);
      })));
    };

    _this.renderSpeedDialTransition = function (styles) {
      var actions = _this.props.actions;
      return _react.default.createElement(_reactNative.View, {
        style: [_reactNative.StyleSheet.absoluteFillObject, {
          flex: 1
        }]
      }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: _this.toggleState
      }, _react.default.createElement(_reactNative.View, {
        style: styles.overlayContainer
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.positionContainer, styles.speedDialContainer]
      }, _react.default.createElement(_reactNative.View, {
        style: {
          alignItems: 'flex-end',
          marginBottom: 16
        }
      }, actions.map(function (action) {
        if (typeof action === 'string') {
          return _this.renderAction(styles, action);
        }

        if (_react.default.isValidElement(action)) {
          return _this.renderElementAction(styles, action);
        }

        var icon = action.icon,
            label = action.label,
            name = action.name;
        return _this.renderLabelAction(styles, icon, label, name);
      })), _this.renderMainButton(styles)))));
    };

    _this.renderMainButton = function (styles) {
      var _this$props = _this.props,
          onLongPress = _this$props.onLongPress,
          icon = _this$props.icon;
      var render = _this.state.render;
      var mainIcon = render !== 'button' ? 'clear' : icon;
      return _react.default.createElement(_reactNative.View, {
        key: "main-button",
        style: styles.container
      }, _react.default.createElement(_RippleFeedback.default, {
        style: getRippleContainerStyle(styles.container),
        color: _this.getRippleColor(),
        onPress: function onPress() {
          return _this.onPress('main-button');
        },
        onLongPress: onLongPress,
        delayPressIn: 20
      }, _this.renderIconButton(styles, mainIcon)));
    };

    _this.renderToolbarAction = function (styles, icon, name) {
      var content;

      var key = _this.getActionItemKey({
        icon: icon,
        name: name
      });

      if (_react.default.isValidElement(icon)) {
        content = _react.default.createElement(_RippleFeedback.default, {
          color: _this.getRippleColor(),
          onPress: function onPress() {
            return _this.onPress(key);
          },
          delayPressIn: 20
        }, _this.renderIconButton(styles, icon));
      } else {
        content = _react.default.createElement(_IconToggle.default, {
          key: key,
          name: key,
          onPress: function onPress() {
            return _this.onPress(key);
          },
          style: {
            icon: styles.icon
          }
        });
      }

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.toolbarActionContainer
      }, content);
    };

    _this.renderToolbarElementAction = function (styles, icon) {
      var key = _this.getActionItemKey({
        icon: icon
      });

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.toolbarActionContainer
      }, _this.renderToolbarAction(styles, icon));
    };

    _this.renderToolbarLabelAction = function (styles, icon, label, name) {
      var key = _this.getActionItemKey({
        icon: icon,
        name: name
      });

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.toolbarActionContainer
      }, _this.renderToolbarAction(styles, icon, name));
    };

    _this.renderAction = function (styles, icon, name) {
      var key = _this.getActionItemKey({
        icon: icon,
        name: name
      });

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.speedDialActionIconContainer
      }, _react.default.createElement(_reactNative.View, {
        style: styles.speedDialActionIcon
      }, _react.default.createElement(_RippleFeedback.default, {
        style: getRippleContainerStyle(styles.speedDialActionIcon),
        color: _this.getRippleColor(),
        onPress: function onPress() {
          return _this.onPress(key);
        },
        delayPressIn: 20
      }, _this.renderIconButton(styles, icon))));
    };

    _this.renderElementAction = function (styles, icon) {
      var key = _this.getActionItemKey({
        icon: icon
      });

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.speedDialActionContainer
      }, _this.renderAction(styles, icon));
    };

    _this.renderLabelAction = function (styles, icon, label, name) {
      var key = _this.getActionItemKey({
        icon: icon,
        name: name
      });

      return _react.default.createElement(_reactNative.View, {
        key: key,
        style: styles.speedDialActionContainer
      }, _react.default.createElement(_reactNative.View, {
        style: styles.speedDialActionLabelContainer
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.speedDialActionLabel
      }, label)), _this.renderAction(styles, icon, name));
    };

    _this.renderIconButton = function (styles, icon) {
      var result;

      if (_react.default.isValidElement(icon)) {
        result = icon;
      } else {
        result = _react.default.createElement(_Icon.default, {
          name: icon,
          style: styles.icon
        });
      }

      return _react.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          alignItems: 'center',
          justifyContent: 'center'
        },
        pointerEvents: "box-only"
      }, result);
    };

    _this.renderButton = function (styles) {
      return _react.default.createElement(_reactNative.Animated.View, {
        style: styles.positionContainer
      }, _this.renderMainButton(styles));
    };

    _this.state = {
      render: 'button'
    };
    return _this;
  }

  (0, _createClass2.default)(ActionButton, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var hidden = this.props.hidden;

      if (nextProps.hidden !== hidden) {
        if (nextProps.hidden === true) {
          this.hide();
        } else {
          this.show();
        }
      }
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps, nextState) {
      var render = this.state.render;

      if (render !== nextState.render) {
        _reactNative.LayoutAnimation.easeInEaseOut();
      }
    }
  }, {
    key: "getRippleColor",
    value: function getRippleColor() {
      var rippleColor = this.props.rippleColor;

      if (rippleColor) {
        return rippleColor;
      }

      var styles = getStyles(this.props, this.state);

      var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(styles.container),
          backgroundColor = _StyleSheet$flatten.backgroundColor;

      return darkenOrLighten(backgroundColor).toString();
    }
  }, {
    key: "render",
    value: function render() {
      var render = this.state.render;
      var styles = getStyles(this.props, this.state);

      if (render === 'toolbar') {
        return this.renderToolbarTransition(styles);
      }

      if (render === 'speedDial') {
        return this.renderSpeedDialTransition(styles);
      }

      return this.renderButton(styles);
    }
  }]);
  return ActionButton;
}(_react.PureComponent);

ActionButton.propTypes = propTypes;
ActionButton.defaultProps = defaultProps;

var _default = (0, _withTheme.default)(ActionButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,