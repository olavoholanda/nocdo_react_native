b30035293fd384616bfa78c8d1096a2f
"use strict";

var rawAsap = require("./raw");

var freeTasks = [];
module.exports = asap;

function asap(task) {
  var rawTask;

  if (freeTasks.length) {
    rawTask = freeTasks.pop();
  } else {
    rawTask = new RawTask();
  }

  rawTask.task = task;
  rawTask.domain = process.domain;
  rawAsap(rawTask);
}

function RawTask() {
  this.task = null;
  this.domain = null;
}

RawTask.prototype.call = function () {
  if (this.domain) {
    this.domain.enter();
  }

  var threw = true;

  try {
    this.task.call();
    threw = false;

    if (this.domain) {
      this.domain.exit();
    }
  } finally {
    if (threw) {
      rawAsap.requestFlush();
    }

    this.task = null;
    this.domain = null;
    freeTasks.push(this);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzYXAuanMiXSwibmFtZXMiOlsicmF3QXNhcCIsInJlcXVpcmUiLCJmcmVlVGFza3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNhcCIsInRhc2siLCJyYXdUYXNrIiwibGVuZ3RoIiwicG9wIiwiUmF3VGFzayIsImRvbWFpbiIsInByb2Nlc3MiLCJwcm90b3R5cGUiLCJjYWxsIiwiZW50ZXIiLCJ0aHJldyIsImV4aXQiLCJyZXF1ZXN0Rmx1c2giLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sU0FBckI7O0FBQ0EsSUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBWUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsSUFBakI7O0FBQ0EsU0FBU0EsSUFBVCxDQUFjQyxJQUFkLEVBQW9CO0FBQ2hCLE1BQUlDLE9BQUo7O0FBQ0EsTUFBSUwsU0FBUyxDQUFDTSxNQUFkLEVBQXNCO0FBQ2xCRCxJQUFBQSxPQUFPLEdBQUdMLFNBQVMsQ0FBQ08sR0FBVixFQUFWO0FBQ0gsR0FGRCxNQUVPO0FBQ0hGLElBQUFBLE9BQU8sR0FBRyxJQUFJRyxPQUFKLEVBQVY7QUFDSDs7QUFDREgsRUFBQUEsT0FBTyxDQUFDRCxJQUFSLEdBQWVBLElBQWY7QUFDQUMsRUFBQUEsT0FBTyxDQUFDSSxNQUFSLEdBQWlCQyxPQUFPLENBQUNELE1BQXpCO0FBQ0FYLEVBQUFBLE9BQU8sQ0FBQ08sT0FBRCxDQUFQO0FBQ0g7O0FBRUQsU0FBU0csT0FBVCxHQUFtQjtBQUNmLE9BQUtKLElBQUwsR0FBWSxJQUFaO0FBQ0EsT0FBS0ssTUFBTCxHQUFjLElBQWQ7QUFDSDs7QUFFREQsT0FBTyxDQUFDRyxTQUFSLENBQWtCQyxJQUFsQixHQUF5QixZQUFZO0FBQ2pDLE1BQUksS0FBS0gsTUFBVCxFQUFpQjtBQUNiLFNBQUtBLE1BQUwsQ0FBWUksS0FBWjtBQUNIOztBQUNELE1BQUlDLEtBQUssR0FBRyxJQUFaOztBQUNBLE1BQUk7QUFDQSxTQUFLVixJQUFMLENBQVVRLElBQVY7QUFDQUUsSUFBQUEsS0FBSyxHQUFHLEtBQVI7O0FBR0EsUUFBSSxLQUFLTCxNQUFULEVBQWlCO0FBQ2IsV0FBS0EsTUFBTCxDQUFZTSxJQUFaO0FBQ0g7QUFDSixHQVJELFNBUVU7QUFHTixRQUFJRCxLQUFKLEVBQVc7QUFNUGhCLE1BQUFBLE9BQU8sQ0FBQ2tCLFlBQVI7QUFDSDs7QUFHRCxTQUFLWixJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUtLLE1BQUwsR0FBYyxJQUFkO0FBQ0FULElBQUFBLFNBQVMsQ0FBQ2lCLElBQVYsQ0FBZSxJQUFmO0FBQ0g7QUFDSixDQTlCRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcmF3QXNhcCA9IHJlcXVpcmUoXCIuL3Jhd1wiKTtcbnZhciBmcmVlVGFza3MgPSBbXTtcblxuLyoqXG4gKiBDYWxscyBhIHRhc2sgYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciByZXR1cm5pbmcsIGluIGl0cyBvd24gZXZlbnQsIHdpdGhcbiAqIHByaW9yaXR5IG92ZXIgSU8gZXZlbnRzLiBBbiBleGNlcHRpb24gdGhyb3duIGluIGEgdGFzayBjYW4gYmUgaGFuZGxlZCBieVxuICogYHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiKSBvciBgZG9tYWluLm9uKFwiZXJyb3JcIilgLCBidXQgd2lsbCBvdGhlcndpc2VcbiAqIGNyYXNoIHRoZSBwcm9jZXNzLiBJZiB0aGUgZXJyb3IgaXMgaGFuZGxlZCwgYWxsIHN1YnNlcXVlbnQgdGFza3Mgd2lsbFxuICogcmVzdW1lLlxuICpcbiAqIEBwYXJhbSB7e2NhbGx9fSB0YXNrIEEgY2FsbGFibGUgb2JqZWN0LCB0eXBpY2FsbHkgYSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vXG4gKiBhcmd1bWVudHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXNhcDtcbmZ1bmN0aW9uIGFzYXAodGFzaykge1xuICAgIHZhciByYXdUYXNrO1xuICAgIGlmIChmcmVlVGFza3MubGVuZ3RoKSB7XG4gICAgICAgIHJhd1Rhc2sgPSBmcmVlVGFza3MucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmF3VGFzayA9IG5ldyBSYXdUYXNrKCk7XG4gICAgfVxuICAgIHJhd1Rhc2sudGFzayA9IHRhc2s7XG4gICAgcmF3VGFzay5kb21haW4gPSBwcm9jZXNzLmRvbWFpbjtcbiAgICByYXdBc2FwKHJhd1Rhc2spO1xufVxuXG5mdW5jdGlvbiBSYXdUYXNrKCkge1xuICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgdGhpcy5kb21haW4gPSBudWxsO1xufVxuXG5SYXdUYXNrLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRvbWFpbikge1xuICAgICAgICB0aGlzLmRvbWFpbi5lbnRlcigpO1xuICAgIH1cbiAgICB2YXIgdGhyZXcgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIHRoaXMudGFzay5jYWxsKCk7XG4gICAgICAgIHRocmV3ID0gZmFsc2U7XG4gICAgICAgIC8vIElmIHRoZSB0YXNrIHRocm93cyBhbiBleGNlcHRpb24gKHByZXN1bWFibHkpIE5vZGUuanMgcmVzdG9yZXMgdGhlXG4gICAgICAgIC8vIGRvbWFpbiBzdGFjayBmb3IgdGhlIG5leHQgZXZlbnQuXG4gICAgICAgIGlmICh0aGlzLmRvbWFpbikge1xuICAgICAgICAgICAgdGhpcy5kb21haW4uZXhpdCgpO1xuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgLy8gV2UgdXNlIHRyeS9maW5hbGx5IGFuZCBhIHRocmV3IGZsYWcgdG8gYXZvaWQgbWVzc2luZyB1cCBzdGFjayB0cmFjZXNcbiAgICAgICAgLy8gd2hlbiB3ZSBjYXRjaCBhbmQgcmVsZWFzZSBlcnJvcnMuXG4gICAgICAgIGlmICh0aHJldykge1xuICAgICAgICAgICAgLy8gSW4gTm9kZS5qcywgdW5jYXVnaHQgZXhjZXB0aW9ucyBhcmUgY29uc2lkZXJlZCBmYXRhbCBlcnJvcnMuXG4gICAgICAgICAgICAvLyBSZS10aHJvdyB0aGVtIHRvIGludGVycnVwdCBmbHVzaGluZyFcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IGZsdXNoaW5nIGNvbnRpbnVlcyBpZiBhbiB1bmNhdWdodCBleGNlcHRpb24gaXNcbiAgICAgICAgICAgIC8vIHN1cHByZXNzZWQgbGlzdGVuaW5nIHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiKSBvclxuICAgICAgICAgICAgLy8gZG9tYWluLm9uKFwiZXJyb3JcIikuXG4gICAgICAgICAgICByYXdBc2FwLnJlcXVlc3RGbHVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSB0YXNrIHRocmV3IGFuIGVycm9yLCB3ZSBkbyBub3Qgd2FudCB0byBleGl0IHRoZSBkb21haW4gaGVyZS5cbiAgICAgICAgLy8gRXhpdGluZyB0aGUgZG9tYWluIHdvdWxkIHByZXZlbnQgdGhlIGRvbWFpbiBmcm9tIGNhdGNoaW5nIHRoZSBlcnJvci5cbiAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb21haW4gPSBudWxsO1xuICAgICAgICBmcmVlVGFza3MucHVzaCh0aGlzKTtcbiAgICB9XG59O1xuXG4iXX0=