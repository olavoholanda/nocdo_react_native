f91a0ad552e1c0e2448ac9742dbf5240
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var invariant = require('fbjs/lib/invariant');

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9jdXJyZW50U3Vic2NyaXB0aW9uIiwiZXZlbnRUeXBlIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsImtleSIsImxlbmd0aCIsInB1c2giLCJ1bmRlZmluZWQiLCJzdWJzY3JpcHRpb25zRm9yVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXpCOztJQVFNQyx1QjtBQUlKLHFDQUFjO0FBQUE7QUFDWixTQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNBLFNBQUtDLG9CQUFMLEdBQTRCLElBQTVCO0FBQ0Q7Ozs7b0NBU0NDLFMsRUFDQUMsWSxFQUNtQjtBQUNuQk4sTUFBQUEsU0FBUyxDQUNQTSxZQUFZLENBQUNDLFVBQWIsS0FBNEIsSUFEckIsRUFFUCx3REFGTyxDQUFUOztBQUlBLFVBQUksQ0FBQyxLQUFLSixxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBTCxFQUE0QztBQUMxQyxhQUFLRixxQkFBTCxDQUEyQkUsU0FBM0IsSUFBd0MsRUFBeEM7QUFDRDs7QUFDRCxVQUFNRyxHQUFHLEdBQUcsS0FBS0wscUJBQUwsQ0FBMkJFLFNBQTNCLEVBQXNDSSxNQUFsRDs7QUFDQSxXQUFLTixxQkFBTCxDQUEyQkUsU0FBM0IsRUFBc0NLLElBQXRDLENBQTJDSixZQUEzQzs7QUFDQUEsTUFBQUEsWUFBWSxDQUFDRCxTQUFiLEdBQXlCQSxTQUF6QjtBQUNBQyxNQUFBQSxZQUFZLENBQUNFLEdBQWIsR0FBbUJBLEdBQW5CO0FBQ0EsYUFBT0YsWUFBUDtBQUNEOzs7MkNBUXNCRCxTLEVBQW9CO0FBQ3pDLFVBQUlBLFNBQVMsS0FBS00sU0FBbEIsRUFBNkI7QUFDM0IsYUFBS1IscUJBQUwsR0FBNkIsRUFBN0I7QUFDRCxPQUZELE1BRU87QUFDTCxlQUFPLEtBQUtBLHFCQUFMLENBQTJCRSxTQUEzQixDQUFQO0FBQ0Q7QUFDRjs7O3VDQVFrQkMsWSxFQUFzQjtBQUN2QyxVQUFNRCxTQUFTLEdBQUdDLFlBQVksQ0FBQ0QsU0FBL0I7QUFDQSxVQUFNRyxHQUFHLEdBQUdGLFlBQVksQ0FBQ0UsR0FBekI7QUFFQSxVQUFNSSxvQkFBb0IsR0FBRyxLQUFLVCxxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBN0I7O0FBQ0EsVUFBSU8sb0JBQUosRUFBMEI7QUFDeEIsZUFBT0Esb0JBQW9CLENBQUNKLEdBQUQsQ0FBM0I7QUFDRDtBQUNGOzs7NENBY3VCSCxTLEVBQXlDO0FBQy9ELGFBQU8sS0FBS0YscUJBQUwsQ0FBMkJFLFNBQTNCLENBQVA7QUFDRDs7Ozs7QUFHSFEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCWix1QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuaW1wb3J0IHR5cGUgRXZlbnRTdWJzY3JpcHRpb24gZnJvbSAnLi9FdmVudFN1YnNjcmlwdGlvbic7XG5cbi8qKlxuICogRXZlbnRTdWJzY3JpcHRpb25WZW5kb3Igc3RvcmVzIGEgc2V0IG9mIEV2ZW50U3Vic2NyaXB0aW9ucyB0aGF0IGFyZVxuICogc3Vic2NyaWJlZCB0byBhIHBhcnRpY3VsYXIgZXZlbnQgdHlwZS5cbiAqL1xuY2xhc3MgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3Ige1xuICBfc3Vic2NyaXB0aW9uc0ZvclR5cGU6IE9iamVjdDtcbiAgX2N1cnJlbnRTdWJzY3JpcHRpb246ID9FdmVudFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICAgIHRoaXMuX2N1cnJlbnRTdWJzY3JpcHRpb24gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzdWJzY3JpcHRpb24ga2V5ZWQgYnkgYW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge0V2ZW50U3Vic2NyaXB0aW9ufSBzdWJzY3JpcHRpb25cbiAgICovXG4gIGFkZFN1YnNjcmlwdGlvbihcbiAgICBldmVudFR5cGU6IHN0cmluZyxcbiAgICBzdWJzY3JpcHRpb246IEV2ZW50U3Vic2NyaXB0aW9uLFxuICApOiBFdmVudFN1YnNjcmlwdGlvbiB7XG4gICAgaW52YXJpYW50KFxuICAgICAgc3Vic2NyaXB0aW9uLnN1YnNjcmliZXIgPT09IHRoaXMsXG4gICAgICAnVGhlIHN1YnNjcmliZXIgb2YgdGhlIHN1YnNjcmlwdGlvbiBpcyBpbmNvcnJlY3RseSBzZXQuJyxcbiAgICApO1xuICAgIGlmICghdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLmxlbmd0aDtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICBzdWJzY3JpcHRpb24uZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgIHN1YnNjcmlwdGlvbi5rZXkgPSBrZXk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgYnVsayBzZXQgb2YgdGhlIHN1YnNjcmlwdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gZXZlbnRUeXBlIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdHlwZSB3aG9zZVxuICAgKiAgIHJlZ2lzdGVyZWQgc3Vwc2NyaXB0aW9ucyB0byByZW1vdmUsIGlmIG51bGwgcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zLlxuICAgKi9cbiAgcmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyhldmVudFR5cGU6ID9zdHJpbmcpIHtcbiAgICBpZiAoZXZlbnRUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLiBJbnN0ZWFkIG9mIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgY2FsbFxuICAgKiBgc3Vic2NyaXB0aW9uLnJlbW92ZSgpYCBkaXJlY3RseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogT2JqZWN0KSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gc3Vic2NyaXB0aW9uLmV2ZW50VHlwZTtcbiAgICBjb25zdCBrZXkgPSBzdWJzY3JpcHRpb24ua2V5O1xuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIGlmIChzdWJzY3JpcHRpb25zRm9yVHlwZSkge1xuICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNGb3JUeXBlW2tleV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgY3VycmVudGx5IHJlZ2lzdGVyZWQgZm9yIHRoZVxuICAgKiBnaXZlbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGFycmF5IGNhbiBiZSBwb3RlbnRpYWxseSBzcGFyc2UgYXMgc3Vic2NyaXB0aW9ucyBhcmUgZGVsZXRlZFxuICAgKiBmcm9tIGl0IHdoZW4gdGhleSBhcmUgcmVtb3ZlZC5cbiAgICpcbiAgICogVE9ETzogVGhpcyByZXR1cm5zIGEgbnVsbGFibGUgYXJyYXkuIHdhdD9cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcmV0dXJucyB7P2FycmF5fVxuICAgKi9cbiAgZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUoZXZlbnRUeXBlOiBzdHJpbmcpOiA/W0V2ZW50U3Vic2NyaXB0aW9uXSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjtcbiJdfQ==