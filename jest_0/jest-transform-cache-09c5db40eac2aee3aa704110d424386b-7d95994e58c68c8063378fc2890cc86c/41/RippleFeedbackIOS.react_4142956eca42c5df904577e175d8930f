25a827079dea34b0b340d04f7cf629a6
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _utils = require("../utils");

var _colors = require("../styles/colors");

var _constants = require("../styles/constants");

var propTypes = {
  testID: _propTypes.default.string,
  color: _propTypes.default.string,
  maxOpacity: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  children: _propTypes.default.element,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  onPressIn: _propTypes.default.func,
  onPressOut: _propTypes.default.func,
  style: _propTypes.default.shape({
    container: _utils.ViewPropTypes.style
  })
};
var defaultProps = {
  testID: null,
  children: null,
  onPress: null,
  onLongPress: null,
  onPressIn: null,
  onPressOut: null,
  color: (0, _color.default)(_colors.black).alpha(0.87).toString(),
  disabled: false,
  maxOpacity: 0.16,
  style: {}
};

var styles = _reactNative.StyleSheet.create({
  container: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    overflow: 'hidden'
  })
});

var MAX_DIAMETER = 200;

var isRippleVisible = function isRippleVisible(_ref) {
  var onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      onPressIn = _ref.onPressIn,
      onPressOut = _ref.onPressOut;
  return onPress || onLongPress || onPressIn || onPressOut;
};

var RippleFeedbackIOS = function (_PureComponent) {
  (0, _inherits2.default)(RippleFeedbackIOS, _PureComponent);

  function RippleFeedbackIOS(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, RippleFeedbackIOS);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RippleFeedbackIOS).call(this, props, context));

    _this.onLayoutChanged = function (event) {
      try {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            width = _event$nativeEvent$la.width,
            height = _event$nativeEvent$la.height;
        var diameter = Math.ceil(Math.sqrt(width * width + height * height));

        _this.setState({
          diameter: Math.min(diameter, MAX_DIAMETER)
        });
      } catch (e) {
        _this.setState({
          diameter: MAX_DIAMETER
        });
      }
    };

    _this.onLongPress = function () {
      var onLongPress = _this.props.onLongPress;
      var _this$state = _this.state,
          maxOpacity = _this$state.maxOpacity,
          opacityBackgroundValue = _this$state.opacityBackgroundValue;
      _this.longPress = true;

      _reactNative.Animated.timing(opacityBackgroundValue, {
        toValue: maxOpacity / 2,
        duration: 700,
        useNativeDriver: true
      }).start();

      if (onLongPress) {
        onLongPress();
      }
    };

    _this.onPress = function () {
      var onPress = _this.props.onPress;
      var _this$state2 = _this.state,
          maxOpacity = _this$state2.maxOpacity,
          diameter = _this$state2.diameter,
          opacityBackgroundValue = _this$state2.opacityBackgroundValue,
          opacityRippleValue = _this$state2.opacityRippleValue,
          scaleValue = _this$state2.scaleValue;

      _reactNative.Animated.parallel([_reactNative.Animated.timing(opacityBackgroundValue, {
        toValue: maxOpacity / 2,
        duration: 125 + diameter,
        easing: _reactNative.Easing.in(_reactNative.Easing.quad),
        useNativeDriver: true
      }), _reactNative.Animated.timing(opacityRippleValue, {
        toValue: 0,
        duration: 125 + diameter,
        useNativeDriver: true
      }), _reactNative.Animated.timing(scaleValue, {
        toValue: 1,
        duration: 125 + diameter,
        easing: _reactNative.Easing.out(_reactNative.Easing.quad),
        useNativeDriver: true
      })]).start(function () {
        _reactNative.Animated.timing(opacityBackgroundValue, {
          toValue: 0,
          duration: 225,
          easing: _reactNative.Easing.out(_reactNative.Easing.quad),
          useNativeDriver: true
        }).start();

        _this.setDefaultAnimatedValues();
      });

      if (onPress) {
        onPress();
      }
    };

    _this.onPressIn = function (event) {
      var onPressIn = _this.props.onPressIn;

      _this.setState({
        pressX: event.nativeEvent.locationX,
        pressY: event.nativeEvent.locationY
      });

      if (onPressIn) {
        onPressIn();
      }
    };

    _this.onPressOut = function () {
      var diameter = _this.state.diameter;
      var onPressOut = _this.props.onPressOut;
      var _this$state3 = _this.state,
          opacityBackgroundValue = _this$state3.opacityBackgroundValue,
          opacityRippleValue = _this$state3.opacityRippleValue,
          scaleValue = _this$state3.scaleValue;

      if (_this.longPress) {
        _this.longPress = false;

        _reactNative.Animated.parallel([_reactNative.Animated.timing(opacityBackgroundValue, {
          toValue: 0,
          duration: 500 + diameter,
          useNativeDriver: true
        }), _reactNative.Animated.timing(opacityRippleValue, {
          toValue: 0,
          duration: 125 + diameter,
          useNativeDriver: true
        }), _reactNative.Animated.timing(scaleValue, {
          toValue: 1,
          duration: 125 + diameter,
          easing: _reactNative.Easing.out(_reactNative.Easing.quad),
          useNativeDriver: true
        })]).start(_this.setDefaultAnimatedValues);
      }

      if (onPressOut) {
        onPressOut();
      }
    };

    _this.setDefaultAnimatedValues = function () {
      var _this$state4 = _this.state,
          maxOpacity = _this$state4.maxOpacity,
          scaleValue = _this$state4.scaleValue,
          opacityRippleValue = _this$state4.opacityRippleValue;
      scaleValue.setValue(0);
      opacityRippleValue.setValue(maxOpacity);
    };

    _this.renderRippleView = function () {
      var _this$state5 = _this.state,
          scaleValue = _this$state5.scaleValue,
          opacityRippleValue = _this$state5.opacityRippleValue,
          diameter = _this$state5.diameter,
          pressX = _this$state5.pressX,
          pressY = _this$state5.pressY,
          rippleColor = _this$state5.rippleColor;
      return _react.default.createElement(_reactNative.Animated.View, {
        key: "ripple-view",
        pointerEvents: "none",
        style: [{
          position: 'absolute',
          top: (pressY || 0) - diameter / 2,
          left: (pressX || 0) - diameter / 2,
          width: diameter,
          height: diameter,
          borderRadius: diameter / 2,
          transform: [{
            scale: scaleValue
          }],
          opacity: opacityRippleValue,
          backgroundColor: rippleColor.toString(),
          zIndex: _constants.ELEVATION_ZINDEX
        }]
      });
    };

    _this.renderOpacityBackground = function () {
      var _this$state6 = _this.state,
          opacityBackgroundValue = _this$state6.opacityBackgroundValue,
          rippleColor = _this$state6.rippleColor;
      return _react.default.createElement(_reactNative.Animated.View, {
        key: "ripple-opacity",
        pointerEvents: "none",
        style: [(0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
          opacity: opacityBackgroundValue,
          backgroundColor: rippleColor.toString(),
          zIndex: _constants.ELEVATION_ZINDEX
        })]
      });
    };

    var _maxOpacity = (0, _color.default)(props.color).isDark() ? 0.12 : 0.3;

    _this.state = {
      scaleValue: new _reactNative.Animated.Value(0),
      opacityRippleValue: new _reactNative.Animated.Value(_maxOpacity),
      opacityBackgroundValue: new _reactNative.Animated.Value(0),
      diameter: MAX_DIAMETER,
      maxOpacity: _maxOpacity,
      rippleColor: (0, _color.default)(props.color)
    };
    return _this;
  }

  (0, _createClass2.default)(RippleFeedbackIOS, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          disabled = _this$props.disabled,
          style = _this$props.style,
          testID = _this$props.testID;

      if (!isRippleVisible(this.props)) {
        return children;
      }

      var parent = _react.default.Children.only(children);

      var ripple = _react.default.createElement(_reactNative.View, {
        key: "ripple-feedback-layer",
        style: [styles.container, style.container],
        pointerEvents: "none"
      }, this.renderOpacityBackground(), this.renderRippleView());

      return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        testID: testID,
        disabled: disabled,
        onLayout: this.onLayoutChanged,
        onPressIn: this.onPressIn,
        onLongPress: this.onLongPress,
        onPressOut: this.onPressOut,
        onPress: this.onPress
      }, _react.default.cloneElement(parent, [], parent.props.children, ripple));
    }
  }]);
  return RippleFeedbackIOS;
}(_react.PureComponent);

RippleFeedbackIOS.propTypes = propTypes;
RippleFeedbackIOS.defaultProps = defaultProps;
var _default = RippleFeedbackIOS;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,