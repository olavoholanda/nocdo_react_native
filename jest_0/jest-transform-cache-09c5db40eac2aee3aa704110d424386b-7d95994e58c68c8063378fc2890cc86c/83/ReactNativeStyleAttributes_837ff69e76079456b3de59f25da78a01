d68ff92891c4339ecb5ecebb1ac3f2fa
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var ImageStylePropTypes = require("../../Image/ImageStylePropTypes");

var TextStylePropTypes = require("../../Text/TextStylePropTypes");

var ViewStylePropTypes = require("./ViewStylePropTypes");

var keyMirror = require('fbjs/lib/keyMirror');

var processColor = require("../../StyleSheet/processColor");

var processTransform = require("../../StyleSheet/processTransform");

var sizesDiffer = require("../../Utilities/differ/sizesDiffer");

var ReactNativeStyleAttributes = (0, _objectSpread2.default)({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));
ReactNativeStyleAttributes.transform = {
  process: processTransform
};
ReactNativeStyleAttributes.shadowOffset = {
  diff: sizesDiffer
};
var colorAttributes = {
  process: processColor
};
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;
module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwia2V5TWlycm9yIiwicHJvY2Vzc0NvbG9yIiwicHJvY2Vzc1RyYW5zZm9ybSIsInNpemVzRGlmZmVyIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJ0cmFuc2Zvcm0iLCJwcm9jZXNzIiwic2hhZG93T2Zmc2V0IiwiZGlmZiIsImNvbG9yQXR0cmlidXRlcyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJTdGFydENvbG9yIiwiYm9yZGVyRW5kQ29sb3IiLCJjb2xvciIsInNoYWRvd0NvbG9yIiwidGV4dERlY29yYXRpb25Db2xvciIsInRpbnRDb2xvciIsInRleHRTaGFkb3dDb2xvciIsIm92ZXJsYXlDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7QUFFQSxJQUFNQSxtQkFBbUIsR0FBR0MsT0FBTyxtQ0FBbkM7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUdELE9BQU8saUNBQWxDOztBQUNBLElBQU1FLGtCQUFrQixHQUFHRixPQUFPLHdCQUFsQzs7QUFLQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxvQkFBRCxDQUF6Qjs7QUFDQSxJQUFNSSxZQUFZLEdBQUdKLE9BQU8saUNBQTVCOztBQUNBLElBQU1LLGdCQUFnQixHQUFHTCxPQUFPLHFDQUFoQzs7QUFDQSxJQUFNTSxXQUFXLEdBQUdOLE9BQU8sc0NBQTNCOztBQUVBLElBQU1PLDBCQUEwQixtQ0FDM0JKLFNBQVMsQ0FBQ0Qsa0JBQUQsQ0FEa0IsRUFFM0JDLFNBQVMsQ0FBQ0Ysa0JBQUQsQ0FGa0IsRUFHM0JFLFNBQVMsQ0FBQ0osbUJBQUQsQ0FIa0IsQ0FBaEM7QUFNQVEsMEJBQTBCLENBQUNDLFNBQTNCLEdBQXVDO0FBQUNDLEVBQUFBLE9BQU8sRUFBRUo7QUFBVixDQUF2QztBQUNBRSwwQkFBMEIsQ0FBQ0csWUFBM0IsR0FBMEM7QUFBQ0MsRUFBQUEsSUFBSSxFQUFFTDtBQUFQLENBQTFDO0FBRUEsSUFBTU0sZUFBZSxHQUFHO0FBQUNILEVBQUFBLE9BQU8sRUFBRUw7QUFBVixDQUF4QjtBQUNBRywwQkFBMEIsQ0FBQ00sZUFBM0IsR0FBNkNELGVBQTdDO0FBQ0FMLDBCQUEwQixDQUFDTyxpQkFBM0IsR0FBK0NGLGVBQS9DO0FBQ0FMLDBCQUEwQixDQUFDUSxXQUEzQixHQUF5Q0gsZUFBekM7QUFDQUwsMEJBQTBCLENBQUNTLGVBQTNCLEdBQTZDSixlQUE3QztBQUNBTCwwQkFBMEIsQ0FBQ1UsZ0JBQTNCLEdBQThDTCxlQUE5QztBQUNBTCwwQkFBMEIsQ0FBQ1csY0FBM0IsR0FBNENOLGVBQTVDO0FBQ0FMLDBCQUEwQixDQUFDWSxnQkFBM0IsR0FBOENQLGVBQTlDO0FBQ0FMLDBCQUEwQixDQUFDYSxjQUEzQixHQUE0Q1IsZUFBNUM7QUFDQUwsMEJBQTBCLENBQUNjLEtBQTNCLEdBQW1DVCxlQUFuQztBQUNBTCwwQkFBMEIsQ0FBQ2UsV0FBM0IsR0FBeUNWLGVBQXpDO0FBQ0FMLDBCQUEwQixDQUFDZ0IsbUJBQTNCLEdBQWlEWCxlQUFqRDtBQUNBTCwwQkFBMEIsQ0FBQ2lCLFNBQTNCLEdBQXVDWixlQUF2QztBQUNBTCwwQkFBMEIsQ0FBQ2tCLGVBQTNCLEdBQTZDYixlQUE3QztBQUNBTCwwQkFBMEIsQ0FBQ21CLFlBQTNCLEdBQTBDZCxlQUExQztBQUVBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQiwwQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBJbWFnZVN0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vLi4vSW1hZ2UvSW1hZ2VTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgVGV4dFN0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vLi4vVGV4dC9UZXh0U3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4vVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbi8qICRGbG93Rml4TWUoPj0wLjU0LjAgc2l0ZT1yZWFjdF9uYXRpdmVfb3NzKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvclxuICogZm91bmQgd2hlbiBGbG93IHYwLjU0IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZFxuICogcnVuIEZsb3cuICovXG5jb25zdCBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcbmNvbnN0IHByb2Nlc3NDb2xvciA9IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyk7XG5jb25zdCBwcm9jZXNzVHJhbnNmb3JtID0gcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9wcm9jZXNzVHJhbnNmb3JtJyk7XG5jb25zdCBzaXplc0RpZmZlciA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvc2l6ZXNEaWZmZXInKTtcblxuY29uc3QgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMgPSB7XG4gIC4uLmtleU1pcnJvcihWaWV3U3R5bGVQcm9wVHlwZXMpLFxuICAuLi5rZXlNaXJyb3IoVGV4dFN0eWxlUHJvcFR5cGVzKSxcbiAgLi4ua2V5TWlycm9yKEltYWdlU3R5bGVQcm9wVHlwZXMpLFxufTtcblxuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudHJhbnNmb3JtID0ge3Byb2Nlc3M6IHByb2Nlc3NUcmFuc2Zvcm19O1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuc2hhZG93T2Zmc2V0ID0ge2RpZmY6IHNpemVzRGlmZmVyfTtcblxuY29uc3QgY29sb3JBdHRyaWJ1dGVzID0ge3Byb2Nlc3M6IHByb2Nlc3NDb2xvcn07XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJCb3R0b21Db2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyTGVmdENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyUmlnaHRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclRvcENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyU3RhcnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckVuZENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuY29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5zaGFkb3dDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50aW50Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50ZXh0U2hhZG93Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5vdmVybGF5Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXM7XG4iXX0=