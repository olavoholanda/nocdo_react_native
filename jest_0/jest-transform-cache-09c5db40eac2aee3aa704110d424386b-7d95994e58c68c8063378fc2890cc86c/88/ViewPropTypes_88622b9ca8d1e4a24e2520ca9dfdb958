8d36c1694ed7fa2dd4b8f3af96c0deff
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var React = require('react');

var EdgeInsetsPropType = require("../../StyleSheet/EdgeInsetsPropType");

var PlatformViewPropTypes = require("./PlatformViewPropTypes");

var PropTypes = require('prop-types');

var StyleSheetPropType = require("../../StyleSheet/StyleSheetPropType");

var ViewStylePropTypes = require("./ViewStylePropTypes");

var _require = require("./ViewAccessibility"),
    AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
    AccessibilityTraits = _require.AccessibilityTraits,
    AccessibilityRoles = _require.AccessibilityRoles,
    AccessibilityStates = _require.AccessibilityStates;

var stylePropType = StyleSheetPropType(ViewStylePropTypes);
module.exports = (0, _objectSpread2.default)({
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
  accessibilityRole: PropTypes.oneOf(AccessibilityRoles),
  accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: EdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
}, PlatformViewPropTypes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,