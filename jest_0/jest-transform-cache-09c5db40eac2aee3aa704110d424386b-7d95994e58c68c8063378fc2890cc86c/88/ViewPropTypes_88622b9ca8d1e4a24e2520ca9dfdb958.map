{"version":3,"sources":["ViewPropTypes.js"],"names":["React","require","EdgeInsetsPropType","PlatformViewPropTypes","PropTypes","StyleSheetPropType","ViewStylePropTypes","AccessibilityComponentTypes","AccessibilityTraits","AccessibilityRoles","AccessibilityStates","stylePropType","module","exports","accessible","bool","accessibilityLabel","node","accessibilityHint","string","accessibilityActions","arrayOf","accessibilityIgnoresInvertColors","accessibilityComponentType","oneOf","accessibilityRole","accessibilityStates","accessibilityLiveRegion","importantForAccessibility","accessibilityTraits","oneOfType","accessibilityViewIsModal","accessibilityElementsHidden","onAccessibilityAction","func","onAccessibilityTap","onMagicTap","testID","nativeID","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","onStartShouldSetResponderCapture","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","hitSlop","onLayout","pointerEvents","style","removeClippedSubviews","renderToHardwareTextureAndroid","shouldRasterizeIOS","collapsable","needsOffscreenAlphaCompositing"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst EdgeInsetsPropType = require('../../StyleSheet/EdgeInsetsPropType');\nconst PlatformViewPropTypes = require('./PlatformViewPropTypes');\nconst PropTypes = require('prop-types');\nconst StyleSheetPropType = require('../../StyleSheet/StyleSheetPropType');\nconst ViewStylePropTypes = require('./ViewStylePropTypes');\n\nconst {\n  AccessibilityComponentTypes,\n  AccessibilityTraits,\n  AccessibilityRoles,\n  AccessibilityStates,\n} = require('./ViewAccessibility');\n\nimport type {\n  AccessibilityComponentType,\n  AccessibilityTrait,\n  AccessibilityRole,\n  AccessibilityState,\n} from './ViewAccessibility';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {TVViewProps} from '../AppleTV/TVViewPropTypes';\nimport type {Layout, LayoutEvent} from '../../Types/CoreEventTypes';\n\nconst stylePropType = StyleSheetPropType(ViewStylePropTypes);\n\nexport type ViewLayout = Layout;\nexport type ViewLayoutEvent = LayoutEvent;\n\ntype DirectEventProps = $ReadOnly<{|\n  onAccessibilityAction?: Function,\n  onAccessibilityTap?: Function,\n  onLayout?: ?(event: LayoutEvent) => void,\n  onMagicTap?: Function,\n|}>;\n\ntype TouchEventProps = $ReadOnly<{|\n  onTouchCancel?: ?Function,\n  onTouchCancelCapture?: ?Function,\n  onTouchEnd?: ?Function,\n  onTouchEndCapture?: ?Function,\n  onTouchMove?: ?Function,\n  onTouchMoveCapture?: ?Function,\n  onTouchStart?: ?Function,\n  onTouchStartCapture?: ?Function,\n|}>;\n\ntype GestureResponderEventProps = $ReadOnly<{|\n  onMoveShouldSetResponder?: ?Function,\n  onMoveShouldSetResponderCapture?: ?Function,\n  onResponderGrant?: ?Function,\n  onResponderMove?: ?Function,\n  onResponderReject?: ?Function,\n  onResponderRelease?: ?Function,\n  onResponderStart?: ?Function,\n  onResponderTerminate?: ?Function,\n  onResponderTerminationRequest?: ?Function,\n  onStartShouldSetResponder?: ?Function,\n  onStartShouldSetResponderCapture?: ?Function,\n|}>;\n\ntype AndroidViewProps = $ReadOnly<{|\n  nativeBackgroundAndroid?: ?Object,\n  nativeForegroundAndroid?: ?Object,\n\n  /* Deprecated transform prop. Use the transform style prop instead */\n  rotation?: empty,\n  /* Deprecated transform prop. Use the transform style prop instead */\n  scaleX?: empty,\n  /* Deprecated transform prop. Use the transform style prop instead */\n  scaleY?: empty,\n  /* Deprecated transform prop. Use the transform style prop instead */\n  translateX?: empty,\n  /* Deprecated transform prop. Use the transform style prop instead */\n  translateY?: empty,\n|}>;\n\nexport type ViewProps = $ReadOnly<{|\n  ...DirectEventProps,\n  ...GestureResponderEventProps,\n  ...TouchEventProps,\n  ...AndroidViewProps,\n\n  // There's no easy way to create a different type if (Platform.isTV):\n  // so we must include TVViewProps\n  ...TVViewProps,\n\n  accessible?: boolean,\n  accessibilityLabel?:\n    | null\n    | React$PropType$Primitive<any>\n    | string\n    | Array<any>\n    | any,\n  accessibilityHint?: string,\n  accessibilityActions?: Array<string>,\n  accessibilityComponentType?: AccessibilityComponentType,\n  accessibilityLiveRegion?: 'none' | 'polite' | 'assertive',\n  importantForAccessibility?: 'auto' | 'yes' | 'no' | 'no-hide-descendants',\n  accessibilityIgnoresInvertColors?: boolean,\n  accessibilityTraits?: AccessibilityTrait | Array<AccessibilityTrait>,\n  accessibilityRole?: AccessibilityRole,\n  accessibilityStates?: Array<AccessibilityState>,\n  accessibilityViewIsModal?: boolean,\n  accessibilityElementsHidden?: boolean,\n  children?: ?React.Node,\n  testID?: ?string,\n  nativeID?: string,\n  hitSlop?: ?EdgeInsetsProp,\n  pointerEvents?: null | 'box-none' | 'none' | 'box-only' | 'auto',\n  style?: stylePropType,\n  removeClippedSubviews?: boolean,\n  renderToHardwareTextureAndroid?: boolean,\n  shouldRasterizeIOS?: boolean,\n  collapsable?: boolean,\n  needsOffscreenAlphaCompositing?: boolean,\n|}>;\n\nmodule.exports = {\n  /**\n   * When `true`, indicates that the view is an accessibility element.\n   * By default, all the touchable elements are accessible.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessible\n   */\n  accessible: PropTypes.bool,\n\n  /**\n   * Overrides the text that's read by the screen reader when the user interacts\n   * with the element. By default, the label is constructed by traversing all\n   * the children and accumulating all the `Text` nodes separated by space.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilitylabel\n   */\n  accessibilityLabel: PropTypes.node,\n\n  /**\n   * An accessibility hint helps users understand what will happen when they perform\n   * an action on the accessibility element when that result is not obvious from the\n   * accessibility label.\n   *\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityHint\n   */\n  accessibilityHint: PropTypes.string,\n\n  /**\n   * Provides an array of custom actions available for accessibility.\n   *\n   * @platform ios\n   */\n  accessibilityActions: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Prevents view from being inverted if set to true and color inversion is turned on.\n   *\n   * @platform ios\n   */\n  accessibilityIgnoresInvertColors: PropTypes.bool,\n\n  /**\n   * Indicates to accessibility services to treat UI component like a\n   * native one. Works for Android only.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype\n   */\n  accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),\n\n  /**\n   * Indicates to accessibility services to treat UI component like a specific role.\n   */\n  accessibilityRole: PropTypes.oneOf(AccessibilityRoles),\n\n  /**\n   * Indicates to accessibility services that UI Component is in a specific State.\n   */\n  accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),\n  /**\n   * Indicates to accessibility services whether the user should be notified\n   * when this view changes. Works for Android API >= 19 only.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion\n   */\n  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),\n\n  /**\n   * Controls how view is important for accessibility which is if it\n   * fires accessibility events and if it is reported to accessibility services\n   * that query the screen. Works for Android only.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#importantforaccessibility\n   */\n  importantForAccessibility: PropTypes.oneOf([\n    'auto',\n    'yes',\n    'no',\n    'no-hide-descendants',\n  ]),\n\n  /**\n   * Provides additional traits to screen reader. By default no traits are\n   * provided unless specified otherwise in element.\n   *\n   * You can provide one trait or an array of many traits.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilitytraits\n   */\n  accessibilityTraits: PropTypes.oneOfType([\n    PropTypes.oneOf(AccessibilityTraits),\n    PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits)),\n  ]),\n\n  /**\n   * A value indicating whether VoiceOver should ignore the elements\n   * within views that are siblings of the receiver.\n   * Default is `false`.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityviewismodal\n   */\n  accessibilityViewIsModal: PropTypes.bool,\n\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityElementsHidden\n   */\n  accessibilityElementsHidden: PropTypes.bool,\n\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs an accessibility custom action.\n   *\n   * @platform ios\n   */\n  onAccessibilityAction: PropTypes.func,\n\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs accessibility tap gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap\n   */\n  onAccessibilityTap: PropTypes.func,\n\n  /**\n   * When `accessible` is `true`, the system will invoke this function when the\n   * user performs the magic tap gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onmagictap\n   */\n  onMagicTap: PropTypes.func,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#testid\n   */\n  testID: PropTypes.string,\n\n  /**\n   * Used to locate this view from native classes.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#nativeid\n   */\n  nativeID: PropTypes.string,\n\n  /**\n   * For most touch interactions, you'll simply want to wrap your component in\n   * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,\n   * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.\n   */\n\n  /**\n   * The View is now responding for touch events. This is the time to highlight\n   * and show the user what is happening.\n   *\n   * `View.props.onResponderGrant: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onrespondergrant\n   */\n  onResponderGrant: PropTypes.func,\n\n  /**\n   * The user is moving their finger.\n   *\n   * `View.props.onResponderMove: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onrespondermove\n   */\n  onResponderMove: PropTypes.func,\n\n  /**\n   * Another responder is already active and will not release it to that `View`\n   * asking to be the responder.\n   *\n   * `View.props.onResponderReject: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderreject\n   */\n  onResponderReject: PropTypes.func,\n\n  /**\n   * Fired at the end of the touch.\n   *\n   * `View.props.onResponderRelease: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderrelease\n   */\n  onResponderRelease: PropTypes.func,\n\n  /**\n   * The responder has been taken from the `View`. Might be taken by other\n   * views after a call to `onResponderTerminationRequest`, or might be taken\n   * by the OS without asking (e.g., happens with control center/ notification\n   * center on iOS)\n   *\n   * `View.props.onResponderTerminate: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderterminate\n   */\n  onResponderTerminate: PropTypes.func,\n\n  /**\n   * Some other `View` wants to become responder and is asking this `View` to\n   * release its responder. Returning `true` allows its release.\n   *\n   * `View.props.onResponderTerminationRequest: (event) => {}`, where `event`\n   * is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest\n   */\n  onResponderTerminationRequest: PropTypes.func,\n\n  /**\n   * Does this view want to become responder on the start of a touch?\n   *\n   * `View.props.onStartShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder\n   */\n  onStartShouldSetResponder: PropTypes.func,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a touch start, it should have this handler which returns `true`.\n   *\n   * `View.props.onStartShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture\n   */\n  onStartShouldSetResponderCapture: PropTypes.func,\n\n  /**\n   * Does this view want to \"claim\" touch responsiveness? This is called for\n   * every touch move on the `View` when it is not the responder.\n   *\n   * `View.props.onMoveShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder\n   */\n  onMoveShouldSetResponder: PropTypes.func,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a move, it should have this handler which returns `true`.\n   *\n   * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onMoveShouldsetrespondercapture\n   */\n  onMoveShouldSetResponderCapture: PropTypes.func,\n\n  /**\n   * This defines how far a touch event can start away from the view.\n   * Typical interface guidelines recommend touch targets that are at least\n   * 30 - 40 points/density-independent pixels.\n   *\n   * > The touch area never extends past the parent view bounds and the Z-index\n   * > of sibling views always takes precedence if a touch hits two overlapping\n   * > views.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#hitslop\n   */\n  hitSlop: EdgeInsetsPropType,\n\n  /**\n   * Invoked on mount and layout changes with:\n   *\n   * `{nativeEvent: { layout: {x, y, width, height}}}`\n   *\n   * This event is fired immediately once the layout has been calculated, but\n   * the new layout may not yet be reflected on the screen at the time the\n   * event is received, especially if a layout animation is in progress.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onlayout\n   */\n  onLayout: PropTypes.func,\n\n  /**\n   * Controls whether the `View` can be the target of touch events.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#pointerevents\n   */\n  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),\n\n  /**\n   * See http://facebook.github.io/react-native/docs/style.html\n   */\n  style: stylePropType,\n\n  /**\n   * This is a special performance property exposed by `RCTView` and is useful\n   * for scrolling content when there are many subviews, most of which are\n   * offscreen. For this property to be effective, it must be applied to a\n   * view that contains many subviews that extend outside its bound. The\n   * subviews must also have `overflow: hidden`, as should the containing view\n   * (or one of its superviews).\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews\n   */\n  removeClippedSubviews: PropTypes.bool,\n\n  /**\n   * Whether this `View` should render itself (and all of its children) into a\n   * single hardware texture on the GPU.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid\n   */\n  renderToHardwareTextureAndroid: PropTypes.bool,\n\n  /**\n   * Whether this `View` should be rendered as a bitmap before compositing.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios\n   */\n  shouldRasterizeIOS: PropTypes.bool,\n\n  /**\n   * Views that are only used to layout their children or otherwise don't draw\n   * anything may be automatically removed from the native hierarchy as an\n   * optimization. Set this property to `false` to disable this optimization and\n   * ensure that this `View` exists in the native view hierarchy.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#collapsable\n   */\n  collapsable: PropTypes.bool,\n\n  /**\n   * Whether this `View` needs to rendered offscreen and composited with an\n   * alpha in order to preserve 100% correct colors and blending behavior.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing\n   */\n  needsOffscreenAlphaCompositing: PropTypes.bool,\n\n  /**\n   * Any additional platform-specific view prop types, or prop type overrides.\n   */\n  ...PlatformViewPropTypes,\n};\n"]}