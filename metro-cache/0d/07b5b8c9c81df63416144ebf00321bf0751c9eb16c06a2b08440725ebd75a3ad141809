{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"../utils","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _utils = _$$_REQUIRE(_dependencyMap[6], \"../utils\");\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\"));\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n\n  var AnimatedBezier = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedBezier);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedBezier).call(this, {\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value.__nodeID\n      }, [value]));\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedBezier, [{\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _utils.val)(this._value));\n      }\n    }]);\n    return AnimatedBezier;\n  }(_AnimatedNode2.default);\n\n  exports.default = AnimatedBezier;\n});","map":[[19,0,1,0],[21,0,2,0],[23,0,5,0],[23,6,5,4,"NEWTON_ITERATIONS"],[23,23,5,21],[23,26,5,24],[23,27,5,0],[24,0,6,0],[24,6,6,4,"NEWTON_MIN_SLOPE"],[24,22,6,20],[24,25,6,23],[24,30,6,0],[25,0,7,0],[25,6,7,4,"SUBDIVISION_PRECISION"],[25,27,7,25],[25,30,7,28],[25,39,7,0],[26,0,8,0],[26,6,8,4,"SUBDIVISION_MAX_ITERATIONS"],[26,32,8,30],[26,35,8,33],[26,37,8,0],[27,0,10,0],[27,6,10,4,"kSplineTableSize"],[27,22,10,20],[27,25,10,23],[27,27,10,0],[28,0,11,0],[28,6,11,4,"kSampleStepSize"],[28,21,11,19],[28,24,11,22],[28,31,11,29,"kSplineTableSize"],[28,47,11,45],[28,50,11,48],[28,53,11,22],[28,54,11,0],[29,0,13,0],[29,6,13,4,"float32ArraySupported"],[29,27,13,25],[29,30,13,28],[29,37,13,35,"Float32Array"],[29,49,13,28],[29,54,13,52],[29,64,13,0],[31,0,15,0],[31,11,15,9,"A"],[31,12,15,0],[31,13,15,11,"aA1"],[31,16,15,0],[31,18,15,16,"aA2"],[31,21,15,0],[31,23,15,21],[32,0,16,2],[32,11,16,9],[32,17,16,15],[32,23,16,21,"aA2"],[32,26,16,9],[32,29,16,27],[32,35,16,33,"aA1"],[32,38,16,2],[33,0,17,1],[35,0,18,0],[35,11,18,9,"B"],[35,12,18,0],[35,13,18,11,"aA1"],[35,16,18,0],[35,18,18,16,"aA2"],[35,21,18,0],[35,23,18,21],[36,0,19,2],[36,11,19,9],[36,17,19,15,"aA2"],[36,20,19,9],[36,23,19,21],[36,29,19,27,"aA1"],[36,32,19,2],[37,0,20,1],[39,0,21,0],[39,11,21,9,"C"],[39,12,21,0],[39,13,21,11,"aA1"],[39,16,21,0],[39,18,21,16],[40,0,22,2],[40,11,22,9],[40,17,22,15,"aA1"],[40,20,22,2],[41,0,23,1],[43,0,26,0],[43,11,26,9,"calcBezier"],[43,21,26,0],[43,22,26,20,"aT"],[43,24,26,0],[43,26,26,24,"aA1"],[43,29,26,0],[43,31,26,29,"aA2"],[43,34,26,0],[43,36,26,34],[44,0,27,2],[44,11,27,9],[44,12,27,10],[44,13,27,11,"A"],[44,14,27,12],[44,15,27,13,"aA1"],[44,18,27,12],[44,20,27,18,"aA2"],[44,23,27,12],[44,24,27,11],[44,27,27,25,"aT"],[44,29,27,11],[44,32,27,30,"B"],[44,33,27,31],[44,34,27,32,"aA1"],[44,37,27,31],[44,39,27,37,"aA2"],[44,42,27,31],[44,43,27,10],[44,47,27,45,"aT"],[44,49,27,10],[44,52,27,50,"C"],[44,53,27,51],[44,54,27,52,"aA1"],[44,57,27,51],[44,58,27,9],[44,62,27,60,"aT"],[44,64,27,2],[45,0,28,1],[47,0,31,0],[47,11,31,9,"getSlope"],[47,19,31,0],[47,20,31,18,"aT"],[47,22,31,0],[47,24,31,22,"aA1"],[47,27,31,0],[47,29,31,27,"aA2"],[47,32,31,0],[47,34,31,32],[48,0,32,2],[48,11,32,9],[48,17,32,15,"A"],[48,18,32,16],[48,19,32,17,"aA1"],[48,22,32,16],[48,24,32,22,"aA2"],[48,27,32,16],[48,28,32,9],[48,31,32,29,"aT"],[48,33,32,9],[48,36,32,34,"aT"],[48,38,32,9],[48,41,32,39],[48,47,32,45,"B"],[48,48,32,46],[48,49,32,47,"aA1"],[48,52,32,46],[48,54,32,52,"aA2"],[48,57,32,46],[48,58,32,39],[48,61,32,59,"aT"],[48,63,32,9],[48,66,32,64,"C"],[48,67,32,65],[48,68,32,66,"aA1"],[48,71,32,65],[48,72,32,2],[49,0,33,1],[51,0,35,0],[51,11,35,9,"binarySubdivide"],[51,26,35,0],[51,27,35,25,"aX"],[51,29,35,0],[51,31,35,29,"aA"],[51,33,35,0],[51,35,35,33,"aB"],[51,37,35,0],[51,39,35,37,"mX1"],[51,42,35,0],[51,44,35,42,"mX2"],[51,47,35,0],[51,49,35,47],[52,0,36,2],[52,8,36,6,"currentX"],[52,16,36,14],[52,19,36,17],[52,20,36,2],[53,0,37,2],[53,8,37,6,"currentT"],[53,16,37,14],[53,19,37,17],[53,20,37,2],[54,0,38,2],[54,8,38,6,"i"],[54,9,38,7],[54,12,38,10],[54,13,38,2],[56,0,39,2],[56,7,39,5],[57,0,40,4,"currentT"],[57,6,40,4,"currentT"],[57,14,40,12],[57,17,40,15,"aA"],[57,19,40,17],[57,22,40,20],[57,23,40,21,"aB"],[57,25,40,23],[57,28,40,26,"aA"],[57,30,40,20],[57,34,40,32],[57,37,40,4],[58,0,41,4,"currentX"],[58,6,41,4,"currentX"],[58,14,41,12],[58,17,41,15,"calcBezier"],[58,27,41,25],[58,28,41,26,"currentT"],[58,36,41,25],[58,38,41,36,"mX1"],[58,41,41,25],[58,43,41,41,"mX2"],[58,46,41,25],[58,47,41,15],[58,50,41,48,"aX"],[58,52,41,4],[60,0,42,4],[60,10,42,8,"currentX"],[60,18,42,16],[60,21,42,19],[60,24,42,4],[60,26,42,24],[61,0,43,6,"aB"],[61,8,43,6,"aB"],[61,10,43,8],[61,13,43,11,"currentT"],[61,21,43,6],[62,0,44,5],[62,7,42,4],[62,13,44,11],[63,0,45,6,"aA"],[63,8,45,6,"aA"],[63,10,45,8],[63,13,45,11,"currentT"],[63,21,45,6],[64,0,46,5],[65,0,47,3],[65,5,39,2],[65,13,48,4,"Math"],[65,17,48,8],[65,18,48,9,"abs"],[65,21,48,4],[65,22,48,13,"currentX"],[65,30,48,4],[65,34,48,25,"SUBDIVISION_PRECISION"],[65,55,48,4],[65,59,49,4],[65,61,49,6,"i"],[65,62,49,4],[65,65,49,10,"SUBDIVISION_MAX_ITERATIONS"],[65,91,39,2],[67,0,51,2],[67,11,51,9,"currentT"],[67,19,51,2],[68,0,52,1],[70,0,54,0],[70,11,54,9,"newtonRaphsonIterate"],[70,31,54,0],[70,32,54,30,"aX"],[70,34,54,0],[70,36,54,34,"aGuessT"],[70,43,54,0],[70,45,54,43,"mX1"],[70,48,54,0],[70,50,54,48,"mX2"],[70,53,54,0],[70,55,54,53],[71,0,55,2],[71,9,55,7],[71,13,55,11,"i"],[71,14,55,12],[71,17,55,15],[71,18,55,2],[71,20,55,18,"i"],[71,21,55,19],[71,24,55,22,"NEWTON_ITERATIONS"],[71,41,55,2],[71,43,55,41],[71,45,55,43,"i"],[71,46,55,2],[71,48,55,46],[72,0,56,4],[72,10,56,8,"currentSlope"],[72,22,56,20],[72,25,56,23,"getSlope"],[72,33,56,31],[72,34,56,32,"aGuessT"],[72,41,56,31],[72,43,56,41,"mX1"],[72,46,56,31],[72,48,56,46,"mX2"],[72,51,56,31],[72,52,56,4],[74,0,57,4],[74,10,57,8,"currentSlope"],[74,22,57,20],[74,27,57,25],[74,30,57,4],[74,32,57,30],[75,0,58,6],[75,15,58,13,"aGuessT"],[75,22,58,6],[76,0,59,5],[78,0,60,4],[78,10,60,8,"currentX"],[78,18,60,16],[78,21,60,19,"calcBezier"],[78,31,60,29],[78,32,60,30,"aGuessT"],[78,39,60,29],[78,41,60,39,"mX1"],[78,44,60,29],[78,46,60,44,"mX2"],[78,49,60,29],[78,50,60,19],[78,53,60,51,"aX"],[78,55,60,4],[79,0,61,4,"aGuessT"],[79,6,61,4,"aGuessT"],[79,13,61,11],[79,17,61,15,"currentX"],[79,25,61,23],[79,28,61,26,"currentSlope"],[79,40,61,4],[80,0,62,3],[82,0,63,2],[82,11,63,9,"aGuessT"],[82,18,63,2],[83,0,64,1],[85,0,66,0],[85,11,66,9,"bezier"],[85,17,66,0],[85,18,66,16,"mX1"],[85,21,66,0],[85,23,66,21,"mY1"],[85,26,66,0],[85,28,66,26,"mX2"],[85,31,66,0],[85,33,66,31,"mY2"],[85,36,66,0],[85,38,66,36],[86,0,67,2],[86,8,67,6],[86,10,67,8,"mX1"],[86,13,67,11],[86,17,67,15],[86,18,67,8],[86,22,67,20,"mX1"],[86,25,67,23],[86,29,67,27],[86,30,67,8],[86,34,67,32,"mX2"],[86,37,67,35],[86,41,67,39],[86,42,67,8],[86,46,67,44,"mX2"],[86,49,67,47],[86,53,67,51],[86,54,67,6],[86,55,67,2],[86,57,67,55],[87,0,68,4],[87,12,68,10],[87,16,68,14,"Error"],[87,21,68,10],[87,22,68,20],[87,63,68,10],[87,64,68,4],[88,0,69,3],[90,0,72,2],[90,8,72,6,"sampleValues"],[90,20,72,18],[90,23,72,21,"float32ArraySupported"],[90,44,72,42],[90,47,73,6],[90,51,73,10,"Float32Array"],[90,63,73,6],[90,64,73,23,"kSplineTableSize"],[90,80,73,6],[90,81,72,42],[90,84,74,6],[90,88,74,10,"Array"],[90,93,74,6],[90,94,74,16,"kSplineTableSize"],[90,110,74,6],[90,111,72,2],[92,0,75,2],[92,8,75,6,"mX1"],[92,11,75,9],[92,16,75,14,"mY1"],[92,19,75,6],[92,23,75,21,"mX2"],[92,26,75,24],[92,31,75,29,"mY2"],[92,34,75,2],[92,36,75,34],[93,0,76,4],[93,11,76,9],[93,15,76,13,"i"],[93,16,76,14],[93,19,76,17],[93,20,76,4],[93,22,76,20,"i"],[93,23,76,21],[93,26,76,24,"kSplineTableSize"],[93,42,76,4],[93,44,76,42],[93,46,76,44,"i"],[93,47,76,4],[93,49,76,47],[94,0,77,6,"sampleValues"],[94,8,77,6,"sampleValues"],[94,20,77,18],[94,21,77,19,"i"],[94,22,77,18],[94,23,77,6],[94,26,77,24,"calcBezier"],[94,36,77,34],[94,37,77,35,"i"],[94,38,77,36],[94,41,77,39,"kSampleStepSize"],[94,56,77,34],[94,58,77,56,"mX1"],[94,61,77,34],[94,63,77,61,"mX2"],[94,66,77,34],[94,67,77,6],[95,0,78,5],[96,0,79,3],[98,0,81,2],[98,13,81,11,"getTForX"],[98,21,81,2],[98,22,81,20,"aX"],[98,24,81,2],[98,26,81,24],[99,0,82,4],[99,10,82,8,"intervalStart"],[99,23,82,21],[99,26,82,24],[99,29,82,4],[100,0,83,4],[100,10,83,8,"currentSample"],[100,23,83,21],[100,26,83,24],[100,27,83,4],[101,0,84,4],[101,10,84,8,"lastSample"],[101,20,84,18],[101,23,84,21,"kSplineTableSize"],[101,39,84,37],[101,42,84,40],[101,43,84,4],[103,0,86,4],[103,13,88,6,"currentSample"],[103,26,88,19],[103,31,88,24,"lastSample"],[103,41,88,6],[103,45,88,38,"sampleValues"],[103,57,88,50],[103,58,88,51,"currentSample"],[103,71,88,50],[103,72,88,38],[103,76,88,69,"aX"],[103,78,86,4],[103,80,89,6],[103,82,89,8,"currentSample"],[103,95,86,4],[103,97,90,6],[104,0,91,6,"intervalStart"],[104,8,91,6,"intervalStart"],[104,21,91,19],[104,25,91,23,"kSampleStepSize"],[104,40,91,6],[105,0,92,5],[107,0,93,4],[107,8,93,6,"currentSample"],[107,21,93,4],[108,0,96,4],[108,10,96,8,"dist"],[108,14,96,12],[108,17,97,6],[108,18,97,7,"aX"],[108,20,97,9],[108,23,97,12,"sampleValues"],[108,35,97,24],[108,36,97,25,"currentSample"],[108,49,97,24],[108,50,97,6],[108,55,98,7,"sampleValues"],[108,67,98,19],[108,68,98,20,"currentSample"],[108,81,98,33],[108,84,98,36],[108,85,98,19],[108,86,98,7],[108,89,98,41,"sampleValues"],[108,101,98,53],[108,102,98,54,"currentSample"],[108,115,98,53],[108,116,97,6],[108,117,96,4],[109,0,99,4],[109,10,99,8,"guessForT"],[109,19,99,17],[109,22,99,20,"intervalStart"],[109,35,99,33],[109,38,99,36,"dist"],[109,42,99,40],[109,45,99,43,"kSampleStepSize"],[109,60,99,4],[110,0,101,4],[110,10,101,8,"initialSlope"],[110,22,101,20],[110,25,101,23,"getSlope"],[110,33,101,31],[110,34,101,32,"guessForT"],[110,43,101,31],[110,45,101,43,"mX1"],[110,48,101,31],[110,50,101,48,"mX2"],[110,53,101,31],[110,54,101,4],[112,0,102,4],[112,10,102,8,"initialSlope"],[112,22,102,20],[112,26,102,24,"NEWTON_MIN_SLOPE"],[112,42,102,4],[112,44,102,42],[113,0,103,6],[113,15,103,13,"newtonRaphsonIterate"],[113,35,103,33],[113,36,103,34,"aX"],[113,38,103,33],[113,40,103,38,"guessForT"],[113,49,103,33],[113,51,103,49,"mX1"],[113,54,103,33],[113,56,103,54,"mX2"],[113,59,103,33],[113,60,103,6],[114,0,104,5],[114,7,102,4],[114,13,104,11],[114,17,104,15,"initialSlope"],[114,29,104,27],[114,34,104,32],[114,37,104,11],[114,39,104,37],[115,0,105,6],[115,15,105,13,"guessForT"],[115,24,105,6],[116,0,106,5],[116,7,104,11],[116,13,106,11],[117,0,107,6],[117,15,107,13,"binarySubdivide"],[117,30,107,28],[117,31,108,8,"aX"],[117,33,107,28],[117,35,109,8,"intervalStart"],[117,48,107,28],[117,50,110,8,"intervalStart"],[117,63,110,21],[117,66,110,24,"kSampleStepSize"],[117,81,107,28],[117,83,111,8,"mX1"],[117,86,107,28],[117,88,112,8,"mX2"],[117,91,107,28],[117,92,107,6],[118,0,114,5],[119,0,115,3],[121,0,117,2],[121,11,117,9],[121,20,117,18,"BezierEasing"],[121,32,117,9],[121,33,117,31,"x"],[121,34,117,9],[121,36,117,34],[122,0,118,4],[122,10,118,8,"mX1"],[122,13,118,11],[122,18,118,16,"mY1"],[122,21,118,8],[122,25,118,23,"mX2"],[122,28,118,26],[122,33,118,31,"mY2"],[122,36,118,4],[122,38,118,36],[123,0,119,6],[123,15,119,13,"x"],[123,16,119,6],[124,0,120,5],[126,0,122,4],[126,10,122,8,"x"],[126,11,122,9],[126,16,122,14],[126,17,122,4],[126,19,122,17],[127,0,123,6],[127,15,123,13],[127,16,123,6],[128,0,124,5],[130,0,125,4],[130,10,125,8,"x"],[130,11,125,9],[130,16,125,14],[130,17,125,4],[130,19,125,17],[131,0,126,6],[131,15,126,13],[131,16,126,6],[132,0,127,5],[134,0,128,4],[134,13,128,11,"calcBezier"],[134,23,128,21],[134,24,128,22,"getTForX"],[134,32,128,30],[134,33,128,31,"x"],[134,34,128,30],[134,35,128,21],[134,37,128,35,"mY1"],[134,40,128,21],[134,42,128,40,"mY2"],[134,45,128,21],[134,46,128,4],[135,0,129,3],[135,5,117,2],[136,0,130,1],[138,6,132,21,"AnimatedBezier"],[138,20],[141,0,136,2],[141,28,136,14,"value"],[141,33,136,2],[141,35,136,21,"mX1"],[141,38,136,2],[141,40,136,26,"mY1"],[141,43,136,2],[141,45,136,31,"mX2"],[141,48,136,2],[141,50,136,36,"mY2"],[141,53,136,2],[141,55,136,41],[142,0,136,41],[144,0,136,41],[145,0,137,4],[145,118,137,10],[146,0,137,12,"type"],[146,8,137,12,"type"],[146,12,137,16],[146,14,137,18],[146,22,137,10],[147,0,137,28,"mX1"],[147,8,137,28,"mX1"],[147,11,137,31],[147,13,137,28,"mX1"],[147,16,137,10],[148,0,137,33,"mY1"],[148,8,137,33,"mY1"],[148,11,137,36],[148,13,137,33,"mY1"],[148,16,137,10],[149,0,137,38,"mX2"],[149,8,137,38,"mX2"],[149,11,137,41],[149,13,137,38,"mX2"],[149,16,137,10],[150,0,137,43,"mY2"],[150,8,137,43,"mY2"],[150,11,137,46],[150,13,137,43,"mY2"],[150,16,137,10],[151,0,137,48,"input"],[151,8,137,48,"input"],[151,13,137,53],[151,15,137,55,"value"],[151,20,137,60],[151,21,137,61,"__nodeID"],[152,0,137,10],[152,7,137,4],[152,9,137,73],[152,10,138,6,"value"],[152,15,137,73],[152,16,137,4],[153,0,140,4],[153,12,140,9,"_value"],[153,18,140,4],[153,21,140,18,"value"],[153,26,140,4],[154,0,141,4],[154,12,141,9,"_bezier"],[154,19,141,4],[154,22,141,19,"bezier"],[154,28,141,25],[154,29,141,26,"mX1"],[154,32,141,25],[154,34,141,31,"mY1"],[154,37,141,25],[154,39,141,36,"mX2"],[154,42,141,25],[154,44,141,41,"mY2"],[154,47,141,25],[154,48,141,4],[155,0,136,41],[156,0,142,3],[160,37,144,17],[161,0,145,4],[161,15,145,11],[161,20,145,16,"_bezier"],[161,27,145,11],[161,28,145,24],[161,44,145,28],[161,49,145,33,"_value"],[161,55,145,24],[161,56,145,11],[161,57,145,4],[162,0,146,3],[165,4,132,44,"AnimatedNode"],[165,26]]},"type":"js/module"}]}