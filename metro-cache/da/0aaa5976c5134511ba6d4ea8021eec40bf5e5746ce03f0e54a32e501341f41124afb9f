{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"expo-asset","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"expo-core","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"./ExpoFontLoader","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.processFontFamily = processFontFamily;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _expoAsset = _$$_REQUIRE(_dependencyMap[2], \"expo-asset\");\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n\n  var _expoCore = _$$_REQUIRE(_dependencyMap[4], \"expo-core\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"invariant\"));\n\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./ExpoFontLoader\"));\n\n  var isWeb = _expoCore.Platform.OS === 'web';\n  var loaded = {};\n  var loadPromises = {};\n\n  function processFontFamily(name) {\n    if (typeof name !== 'string' || _expoConstants.default.systemFonts.includes(name) || name === 'System') {\n      return name;\n    }\n\n    if (name.includes(_expoConstants.default.sessionId)) {\n      return name;\n    }\n\n    if (!isLoaded(name)) {\n      if (__DEV__) {\n        if (isLoading(name)) {\n          console.error(\"You started loading the font \\\"\" + name + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n        } else {\n          console.error(\"fontFamily \\\"\" + name + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n        }\n      }\n\n      return 'System';\n    }\n\n    return \"ExpoFont-\" + _getNativeFontName(name);\n  }\n\n  function isLoaded(name) {\n    return loaded.hasOwnProperty(name);\n  }\n\n  function isLoading(name) {\n    return loadPromises.hasOwnProperty(name);\n  }\n\n  function loadAsync(nameOrMap, source) {\n    var fontMap, names, name, asset;\n    return _regenerator.default.async(function loadAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof nameOrMap === 'object')) {\n              _context2.next = 6;\n              break;\n            }\n\n            fontMap = nameOrMap;\n            names = Object.keys(fontMap);\n            _context2.next = 5;\n            return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n              return loadAsync(name, fontMap[name]);\n            })));\n\n          case 5:\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            name = nameOrMap;\n\n            if (!loaded[name]) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 9:\n            if (!loadPromises[name]) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", loadPromises[name]);\n\n          case 11:\n            (0, _invariant.default)(source, \"No source from which to load font \\\"\" + name + \"\\\"\");\n            asset = _getAssetForSource(source);\n\n            loadPromises[name] = function _callee() {\n              return _regenerator.default.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return _regenerator.default.awrap(_loadSingleFontAsync(name, asset));\n\n                    case 3:\n                      loaded[name] = true;\n\n                    case 4:\n                      _context.prev = 4;\n                      delete loadPromises[name];\n                      return _context.finish(4);\n\n                    case 7:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, this, [[0,, 4, 7]]);\n            }();\n\n            _context2.next = 16;\n            return _regenerator.default.awrap(loadPromises[name]);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _getAssetForSource(source) {\n    if (!isWeb && typeof source === 'string') {\n      throw new Error('Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font');\n    }\n\n    if (isWeb || typeof source === 'number') {\n      return _expoAsset.Asset.fromModule(source);\n    }\n\n    return source;\n  }\n\n  function _loadSingleFontAsync(name, asset) {\n    return _regenerator.default.async(function _loadSingleFontAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regenerator.default.awrap(asset.downloadAsync());\n\n          case 2:\n            if (asset.downloaded) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error(\"Failed to download asset for font \\\"\" + name + \"\\\"\");\n\n          case 4:\n            _context3.next = 6;\n            return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(_getNativeFontName(name), asset.localUri));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _getNativeFontName(name) {\n    if (isWeb) {\n      return name;\n    }\n\n    return _expoConstants.default.sessionId + \"-\" + name;\n  }\n\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get: function get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n\n      return {\n        processFontFamily: processFontFamily,\n        isLoaded: isLoaded,\n        isLoading: isLoading,\n        loadAsync: loadAsync\n      };\n    }\n  });\n});","map":[[14,0,1,0],[16,0,2,0],[18,0,3,0],[20,0,4,0],[22,0,5,0],[24,0,6,0],[24,6,6,6,"isWeb"],[24,11,6,11],[24,14,6,14,"Platform"],[24,33,6,23,"OS"],[24,35,6,14],[24,40,6,30],[24,45,6,0],[25,0,7,0],[25,6,7,6,"loaded"],[25,12,7,12],[25,15,7,15],[25,17,7,0],[26,0,8,0],[26,6,8,6,"loadPromises"],[26,18,8,18],[26,21,8,21],[26,23,8,0],[28,0,9,7],[28,11,9,16,"processFontFamily"],[28,28,9,7],[28,29,9,34,"name"],[28,33,9,7],[28,35,9,40],[29,0,10,4],[29,8,10,8],[29,15,10,15,"name"],[29,19,10,8],[29,24,10,24],[29,32,10,8],[29,36,10,36,"Constants"],[29,59,10,46,"systemFonts"],[29,70,10,36],[29,71,10,58,"includes"],[29,79,10,36],[29,80,10,67,"name"],[29,84,10,36],[29,85,10,8],[29,89,10,76,"name"],[29,93,10,80],[29,98,10,85],[29,106,10,4],[29,108,10,95],[30,0,11,8],[30,13,11,15,"name"],[30,17,11,8],[31,0,12,5],[33,0,13,4],[33,8,13,8,"name"],[33,12,13,12],[33,13,13,13,"includes"],[33,21,13,8],[33,22,13,22,"Constants"],[33,45,13,32,"sessionId"],[33,54,13,8],[33,55,13,4],[33,57,13,44],[34,0,14,8],[34,13,14,15,"name"],[34,17,14,8],[35,0,15,5],[37,0,16,4],[37,8,16,8],[37,9,16,9,"isLoaded"],[37,17,16,17],[37,18,16,18,"name"],[37,22,16,17],[37,23,16,4],[37,25,16,25],[38,0,17,8],[38,10,17,12,"__DEV__"],[38,17,17,8],[38,19,17,21],[39,0,18,12],[39,12,18,16,"isLoading"],[39,21,18,25],[39,22,18,26,"name"],[39,26,18,25],[39,27,18,12],[39,29,18,33],[40,0,19,16,"console"],[40,10,19,16,"console"],[40,17,19,23],[40,18,19,24,"error"],[40,23,19,16],[40,60,19,63,"name"],[40,64,19,16],[41,0,22,13],[41,9,18,12],[41,15,23,17],[42,0,24,16,"console"],[42,10,24,16,"console"],[42,17,24,23],[42,18,24,24,"error"],[42,23,24,16],[42,42,24,45,"name"],[42,46,24,16],[43,0,27,13],[44,0,28,9],[46,0,29,8],[46,13,29,15],[46,21,29,8],[47,0,30,5],[49,0,31,4],[49,25,31,23,"_getNativeFontName"],[49,43,31,41],[49,44,31,42,"name"],[49,48,31,41],[49,49,31,4],[50,0,32,1],[52,0,33,7],[52,11,33,16,"isLoaded"],[52,19,33,7],[52,20,33,25,"name"],[52,24,33,7],[52,26,33,31],[53,0,34,4],[53,11,34,11,"loaded"],[53,17,34,17],[53,18,34,18,"hasOwnProperty"],[53,32,34,11],[53,33,34,33,"name"],[53,37,34,11],[53,38,34,4],[54,0,35,1],[56,0,36,7],[56,11,36,16,"isLoading"],[56,20,36,7],[56,21,36,26,"name"],[56,25,36,7],[56,27,36,32],[57,0,37,4],[57,11,37,11,"loadPromises"],[57,23,37,23],[57,24,37,24,"hasOwnProperty"],[57,38,37,11],[57,39,37,39,"name"],[57,43,37,11],[57,44,37,4],[58,0,38,1],[60,0,39,7],[60,11,39,22,"loadAsync"],[60,20,39,7],[60,21,39,32,"nameOrMap"],[60,30,39,7],[60,32,39,43,"source"],[60,38,39,7],[61,0,39,7],[62,0,39,7],[63,0,39,7],[64,0,39,7],[65,0,39,7],[66,0,39,7],[66,18,40,8],[66,25,40,15,"nameOrMap"],[66,34,40,8],[66,39,40,29],[66,47,39,7],[67,0,39,7],[68,0,39,7],[69,0,39,7],[71,0,41,14,"fontMap"],[71,12,41,14,"fontMap"],[71,19,39,7],[71,22,41,24,"nameOrMap"],[71,31,39,7],[72,0,42,14,"names"],[72,12,42,14,"names"],[72,17,39,7],[72,20,42,22,"Object"],[72,26,42,28],[72,27,42,29,"keys"],[72,31,42,22],[72,32,42,34,"fontMap"],[72,39,42,22],[72,40,39,7],[73,0,39,7],[74,0,39,7],[74,46,43,14,"Promise"],[74,53,43,21],[74,54,43,22,"all"],[74,57,43,14],[74,58,43,26,"names"],[74,63,43,31],[74,64,43,32,"map"],[74,67,43,26],[74,68,43,36],[74,78,43,36,"name"],[74,82,43,40],[75,0,43,40],[75,21,43,44,"loadAsync"],[75,30,43,53],[75,31,43,54,"name"],[75,35,43,53],[75,37,43,60,"fontMap"],[75,44,43,67],[75,45,43,68,"name"],[75,49,43,67],[75,50,43,53],[75,51,43,40],[76,0,43,40],[76,13,43,26],[76,14,43,14],[76,15,39,7],[78,0,39,7],[79,0,39,7],[81,0,39,7],[82,0,46,10,"name"],[82,12,46,10,"name"],[82,16,39,7],[82,19,46,17,"nameOrMap"],[82,28,39,7],[84,0,39,7],[84,17,47,8,"loaded"],[84,23,47,14],[84,24,47,15,"name"],[84,28,47,14],[84,29,39,7],[85,0,39,7],[86,0,39,7],[87,0,39,7],[89,0,39,7],[91,0,39,7],[92,0,39,7],[92,17,50,8,"loadPromises"],[92,29,50,20],[92,30,50,21,"name"],[92,34,50,20],[92,35,39,7],[93,0,39,7],[94,0,39,7],[95,0,39,7],[97,0,39,7],[97,46,51,15,"loadPromises"],[97,58,51,27],[97,59,51,28,"name"],[97,63,51,27],[97,64,39,7],[99,0,39,7],[100,0,57,4],[100,36,57,14,"source"],[100,42,57,4],[100,85,57,60,"name"],[100,89,57,4],[101,0,58,10,"asset"],[101,12,58,10,"asset"],[101,17,39,7],[101,20,58,18,"_getAssetForSource"],[101,38,58,36],[101,39,58,37,"source"],[101,45,58,36],[101,46,39,7],[103,0,59,4,"loadPromises"],[103,12,59,4,"loadPromises"],[103,24,59,16],[103,25,59,17,"name"],[103,29,59,16],[103,30,59,4],[103,33,59,26],[104,0,59,26],[105,0,59,26],[106,0,59,26],[107,0,59,26],[108,0,59,26],[109,0,59,26],[110,0,59,26],[110,56,61,18,"_loadSingleFontAsync"],[110,76,61,38],[110,77,61,39,"name"],[110,81,61,38],[110,83,61,45,"asset"],[110,88,61,38],[110,89,59,26],[112,0,59,26],[113,0,62,12,"loaded"],[113,22,62,12,"loaded"],[113,28,62,18],[113,29,62,19,"name"],[113,33,62,18],[113,34,62,12],[113,37,62,27],[113,41,62,12],[115,0,59,26],[116,0,59,26],[117,0,65,12],[117,29,65,19,"loadPromises"],[117,41,65,31],[117,42,65,32,"name"],[117,46,65,31],[117,47,65,12],[118,0,59,26],[120,0,59,26],[121,0,59,26],[122,0,59,26],[123,0,59,26],[124,0,59,26],[125,0,59,26],[126,0,59,26],[126,13,59,25],[126,15,59,4],[128,0,39,7],[129,0,39,7],[129,46,68,10,"loadPromises"],[129,58,68,22],[129,59,68,23,"name"],[129,63,68,22],[129,64,39,7],[131,0,39,7],[132,0,39,7],[133,0,39,7],[134,0,39,7],[135,0,39,7],[136,0,39,7],[137,0,39,7],[139,0,70,0],[139,11,70,9,"_getAssetForSource"],[139,29,70,0],[139,30,70,28,"source"],[139,36,70,0],[139,38,70,36],[140,0,71,4],[140,8,71,8],[140,9,71,9,"isWeb"],[140,14,71,8],[140,18,71,18],[140,25,71,25,"source"],[140,31,71,18],[140,36,71,36],[140,44,71,4],[140,46,71,46],[141,0,74,8],[141,12,74,14],[141,16,74,18,"Error"],[141,21,74,14],[141,22,74,24],[141,235,74,14],[141,236,74,8],[142,0,75,5],[144,0,76,4],[144,8,76,8,"isWeb"],[144,13,76,13],[144,17,76,17],[144,24,76,24,"source"],[144,30,76,17],[144,35,76,35],[144,43,76,4],[144,45,76,45],[145,0,77,8],[145,13,77,15,"Asset"],[145,30,77,21,"fromModule"],[145,40,77,15],[145,41,77,32,"source"],[145,47,77,15],[145,48,77,8],[146,0,78,5],[148,0,79,4],[148,11,79,11,"source"],[148,17,79,4],[149,0,80,1],[151,0,81,0],[151,11,81,15,"_loadSingleFontAsync"],[151,31,81,0],[151,32,81,36,"name"],[151,36,81,0],[151,38,81,42,"asset"],[151,43,81,0],[152,0,81,0],[153,0,81,0],[154,0,81,0],[155,0,81,0],[156,0,81,0],[157,0,81,0],[157,46,82,10,"asset"],[157,51,82,15],[157,52,82,16,"downloadAsync"],[157,65,82,10],[157,67,81,0],[159,0,81,0],[160,0,81,0],[160,16,83,9,"asset"],[160,21,83,14],[160,22,83,15,"downloaded"],[160,32,81,0],[161,0,81,0],[162,0,81,0],[163,0,81,0],[165,0,81,0],[165,18,84,14],[165,22,84,18,"Error"],[165,27,84,14],[165,69,84,62,"name"],[165,73,84,14],[165,81,81,0],[167,0,81,0],[168,0,81,0],[169,0,81,0],[169,46,86,10,"ExpoFontLoader"],[169,70,86,25,"loadAsync"],[169,79,86,10],[169,80,86,35,"_getNativeFontName"],[169,98,86,53],[169,99,86,54,"name"],[169,103,86,53],[169,104,86,10],[169,106,86,61,"asset"],[169,111,86,66],[169,112,86,67,"localUri"],[169,120,86,10],[169,121,81,0],[171,0,81,0],[172,0,81,0],[173,0,81,0],[174,0,81,0],[175,0,81,0],[176,0,81,0],[177,0,81,0],[179,0,88,0],[179,11,88,9,"_getNativeFontName"],[179,29,88,0],[179,30,88,28,"name"],[179,34,88,0],[179,36,88,34],[180,0,89,4],[180,8,89,8,"isWeb"],[180,13,89,4],[180,15,89,15],[181,0,90,8],[181,13,90,15,"name"],[181,17,90,8],[182,0,91,5],[184,0,92,4],[184,11,92,14,"Constants"],[184,34,92,24,"sessionId"],[184,43,92,4],[184,52,92,37,"name"],[184,56,92,4],[185,0,93,1],[187,0,94,0],[187,6,94,4,"wasImportWarningShown"],[187,27,94,25],[187,30,94,28],[187,35,94,0],[188,0,96,0,"Object"],[188,2,96,0,"Object"],[188,8,96,6],[188,9,96,7,"defineProperty"],[188,23,96,0],[188,24,96,22,"exports"],[188,31,96,0],[188,33,96,31],[188,39,96,0],[188,41,96,39],[189,0,97,4,"get"],[189,4,97,4,"get"],[189,7,96,39],[189,24,97,10],[190,0,98,8],[190,10,98,12],[190,11,98,13,"wasImportWarningShown"],[190,32,98,8],[190,34,98,36],[191,0,99,12,"console"],[191,8,99,12,"console"],[191,15,99,19],[191,16,99,20,"warn"],[191,20,99,12],[192,0,100,12,"wasImportWarningShown"],[192,8,100,12,"wasImportWarningShown"],[192,29,100,33],[192,32,100,36],[192,36,100,12],[193,0,101,9],[195,0,102,8],[195,13,102,15],[196,0,103,12,"processFontFamily"],[196,8,103,12,"processFontFamily"],[196,25,103,29],[196,27,103,12,"processFontFamily"],[196,44,102,15],[197,0,104,12,"isLoaded"],[197,8,104,12,"isLoaded"],[197,16,104,20],[197,18,104,12,"isLoaded"],[197,26,102,15],[198,0,105,12,"isLoading"],[198,8,105,12,"isLoading"],[198,17,105,21],[198,19,105,12,"isLoading"],[198,28,102,15],[199,0,106,12,"loadAsync"],[199,8,106,12,"loadAsync"],[199,17,106,21],[199,19,106,12,"loadAsync"],[200,0,102,15],[200,7,102,8],[201,0,108,5],[202,0,96,39],[202,3,96,0]]},"type":"js/module"}]}