{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"pretty-format","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/parseErrorStack","data":{"isAsync":false}},{"name":"./symbolicateStackTrace","data":{"isAsync":false}},{"name":"./format/ReactNodeFormatter","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n\n  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"pretty-format\"));\n\n  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"react-native/Libraries/Core/Devtools/parseErrorStack\"));\n\n  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./symbolicateStackTrace\"));\n\n  var _ReactNodeFormatter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./format/ReactNodeFormatter\"));\n\n  var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n  exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;\n\n  function serializeLogDataAsync(data, level) {\n    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;\n\n    return _regenerator.default.async(function serializeLogDataAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            includesStack = false;\n\n            if (!_stackTraceLogsSupported()) {\n              _context.next = 32;\n              break;\n            }\n\n            if (!_isUnhandledPromiseRejection(data, level)) {\n              _context.next = 11;\n              break;\n            }\n\n            rawStack = data[0];\n            syntheticError = {\n              stack: rawStack\n            };\n            _context.next = 7;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(syntheticError));\n\n          case 7:\n            stack = _context.sent;\n\n            if (!stack.length) {\n              serializedValues = _stringifyLogData(data);\n            } else {\n              errorMessage = rawStack.split('\\n')[1];\n              serializedValues = [{\n                message: \"[Unhandled promise rejection: \" + errorMessage + \"]\",\n                stack: _formatStack(stack)\n              }];\n              includesStack = true;\n            }\n\n            _context.next = 30;\n            break;\n\n          case 11:\n            if (!(data.length === 1 && data[0] instanceof Error)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 14;\n            return _regenerator.default.awrap(_serializeErrorAsync(data[0]));\n\n          case 14:\n            serializedError = _context.sent;\n            serializedValues = [serializedError];\n            includesStack = serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 19:\n            if (!(level === 'warn' || level === 'error')) {\n              _context.next = 29;\n              break;\n            }\n\n            error = _captureConsoleStackTrace();\n            _errorMessage = _stringifyLogData(data).join(', ');\n            _context.next = 24;\n            return _regenerator.default.awrap(_serializeErrorAsync(error, _errorMessage));\n\n          case 24:\n            _serializedError = _context.sent;\n            serializedValues = [_serializedError];\n            includesStack = _serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 29:\n            serializedValues = _stringifyLogData(data);\n\n          case 30:\n            _context.next = 33;\n            break;\n\n          case 32:\n            serializedValues = _stringifyLogData(data);\n\n          case 33:\n            return _context.abrupt(\"return\", {\n              body: (0, _toConsumableArray2.default)(serializedValues),\n              includesStack: includesStack\n            });\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _stringifyLogData(data) {\n    return data.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return (0, _prettyFormat.default)(item, {\n          plugins: [_ReactNodeFormatter.default]\n        });\n      }\n    });\n  }\n\n  function _serializeErrorAsync(error, message) {\n    var stack, formattedStack;\n    return _regenerator.default.async(function _serializeErrorAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (message == null) {\n              message = error.message;\n            }\n\n            if (!(!error.stack || !error.stack.length)) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _prettyFormat.default)(error));\n\n          case 3:\n            _context2.next = 5;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(error));\n\n          case 5:\n            stack = _context2.sent;\n            formattedStack = _formatStack(stack);\n            return _context2.abrupt(\"return\", {\n              message: message,\n              stack: formattedStack\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _symbolicateErrorAsync(error) {\n    var parsedStack, symbolicatedStack;\n    return _regenerator.default.async(function _symbolicateErrorAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parsedStack = (0, _parseErrorStack.default)(error);\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regenerator.default.awrap((0, _symbolicateStackTrace.default)(parsedStack));\n\n          case 4:\n            symbolicatedStack = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 10:\n            if (symbolicatedStack) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 12:\n            return _context3.abrupt(\"return\", symbolicatedStack.map(_removeProjectRoot));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this, [[1, 7]]);\n  }\n\n  function _formatStack(stack) {\n    return stack.map(function (frame) {\n      var line = frame.file + \":\" + frame.lineNumber;\n\n      if (frame.column != null) {\n        line += \":\" + frame.column;\n      }\n\n      line += \" in \" + frame.methodName;\n      return line;\n    }).join('\\n');\n  }\n\n  function _removeProjectRoot(frame) {\n    var filename = frame.file;\n\n    if (filename == null) {\n      return frame;\n    }\n\n    var projectRoot = _getProjectRoot();\n\n    if (projectRoot == null) {\n      return frame;\n    }\n\n    if (filename.startsWith(projectRoot)) {\n      filename = filename.substring(projectRoot.length);\n\n      if (filename[0] === '/' || filename[0] === '\\\\') {\n        filename = filename.substring(1);\n      }\n\n      frame.file = filename;\n    }\n\n    return frame;\n  }\n\n  function _stackTraceLogsSupported() {\n    return !!(__DEV__ && _getProjectRoot());\n  }\n\n  function _isUnhandledPromiseRejection(data, level) {\n    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);\n  }\n\n  function _captureConsoleStackTrace() {\n    try {\n      throw new Error();\n    } catch (error) {\n      var stackLines = error.stack.split('\\n');\n      var consoleMethodIndex = stackLines.findIndex(function (frame) {\n        return frame.includes(EXPO_CONSOLE_METHOD_NAME);\n      });\n\n      if (consoleMethodIndex !== -1) {\n        stackLines = stackLines.slice(consoleMethodIndex + 1);\n        error.stack = stackLines.join('\\n');\n      }\n\n      return error;\n    }\n  }\n\n  function _getProjectRoot() {\n    return _expoConstants.default.manifest && _expoConstants.default.manifest.developer ? _expoConstants.default.manifest.developer.projectRoot : null;\n  }\n\n  var _default = {\n    serializeLogDataAsync: serializeLogDataAsync\n  };\n  exports.default = _default;\n});","map":[[13,0,1,0],[15,0,2,0],[17,0,3,0],[19,0,4,0],[21,0,5,0],[23,0,6,7],[23,6,6,13,"EXPO_CONSOLE_METHOD_NAME"],[23,30,6,37],[23,33,6,40],[23,51,6,7],[26,0,7,0],[26,11,7,15,"serializeLogDataAsync"],[26,32,7,0],[26,33,7,37,"data"],[26,37,7,0],[26,39,7,43,"level"],[26,44,7,0],[27,0,7,0],[29,0,7,0],[30,0,7,0],[31,0,7,0],[32,0,7,0],[33,0,9,8,"includesStack"],[33,12,9,8,"includesStack"],[33,25,7,0],[33,28,9,24],[33,33,7,0],[35,0,7,0],[35,17,10,8,"_stackTraceLogsSupported"],[35,41,10,32],[35,43,7,0],[36,0,7,0],[37,0,7,0],[38,0,7,0],[40,0,7,0],[40,17,11,12,"_isUnhandledPromiseRejection"],[40,45,11,40],[40,46,11,41,"data"],[40,50,11,40],[40,52,11,47,"level"],[40,57,11,40],[40,58,7,0],[41,0,7,0],[42,0,7,0],[43,0,7,0],[45,0,12,16,"rawStack"],[45,12,12,16,"rawStack"],[45,20,7,0],[45,23,12,27,"data"],[45,27,12,31],[45,28,12,32],[45,29,12,31],[45,30,7,0],[46,0,13,16,"syntheticError"],[46,12,13,16,"syntheticError"],[46,26,7,0],[46,29,13,33],[47,0,13,35,"stack"],[47,14,13,35,"stack"],[47,19,13,40],[47,21,13,42,"rawStack"],[48,0,13,33],[48,13,7,0],[49,0,7,0],[50,0,7,0],[50,46,14,30,"_symbolicateErrorAsync"],[50,68,14,52],[50,69,14,53,"syntheticError"],[50,83,14,52],[50,84,7,0],[52,0,7,0],[53,0,14,16,"stack"],[53,12,14,16,"stack"],[53,17,7,0],[55,0,15,12],[55,16,15,16],[55,17,15,17,"stack"],[55,22,15,22],[55,23,15,23,"length"],[55,29,15,12],[55,31,15,31],[56,0,16,16,"serializedValues"],[56,14,16,16,"serializedValues"],[56,30,16,32],[56,33,16,35,"_stringifyLogData"],[56,50,16,52],[56,51,16,53,"data"],[56,55,16,52],[56,56,16,16],[57,0,17,13],[57,13,15,12],[57,19,18,17],[58,0,20,20,"errorMessage"],[58,14,20,20,"errorMessage"],[58,26,18,17],[58,29,20,35,"rawStack"],[58,37,20,43],[58,38,20,44,"split"],[58,43,20,35],[58,44,20,50],[58,48,20,35],[58,50,20,56],[58,51,20,35],[58,52,18,17],[59,0,21,16,"serializedValues"],[59,14,21,16,"serializedValues"],[59,30,21,32],[59,33,21,35],[59,34,22,20],[60,0,23,24,"message"],[60,16,23,24,"message"],[60,23,23,31],[60,60,23,66,"errorMessage"],[60,72,23,31],[60,78,22,20],[61,0,24,24,"stack"],[61,16,24,24,"stack"],[61,21,24,29],[61,23,24,31,"_formatStack"],[61,35,24,43],[61,36,24,44,"stack"],[61,41,24,43],[62,0,22,20],[62,15,21,35],[62,16,21,16],[63,0,27,16,"includesStack"],[63,14,27,16,"includesStack"],[63,27,27,29],[63,30,27,32],[63,34,27,16],[64,0,28,13],[66,0,7,0],[67,0,7,0],[69,0,7,0],[70,0,7,0],[70,18,30,17,"data"],[70,22,30,21],[70,23,30,22,"length"],[70,29,30,17],[70,34,30,33],[70,35,30,17],[70,39,30,38,"data"],[70,43,30,42],[70,44,30,43],[70,45,30,42],[70,46,30,38],[70,58,30,57,"Error"],[70,63,7,0],[71,0,7,0],[72,0,7,0],[73,0,7,0],[75,0,7,0],[76,0,7,0],[76,46,34,40,"_serializeErrorAsync"],[76,66,34,60],[76,67,34,61,"data"],[76,71,34,65],[76,72,34,66],[76,73,34,65],[76,74,34,60],[76,75,7,0],[78,0,7,0],[79,0,34,16,"serializedError"],[79,12,34,16,"serializedError"],[79,27,7,0],[80,0,35,12,"serializedValues"],[80,12,35,12,"serializedValues"],[80,28,35,28],[80,31,35,31],[80,32,35,32,"serializedError"],[80,47,35,31],[80,48,35,12],[81,0,36,12,"includesStack"],[81,12,36,12,"includesStack"],[81,25,36,25],[81,28,36,28,"serializedError"],[81,43,36,43],[81,44,36,44,"hasOwnProperty"],[81,58,36,28],[81,59,36,59],[81,66,36,28],[81,67,36,12],[82,0,7,0],[83,0,7,0],[85,0,7,0],[86,0,7,0],[86,18,38,17,"level"],[86,23,38,22],[86,28,38,27],[86,34,38,17],[86,38,38,37,"level"],[86,43,38,42],[86,48,38,47],[86,55,7,0],[87,0,7,0],[88,0,7,0],[89,0,7,0],[91,0,41,16,"error"],[91,12,41,16,"error"],[91,17,7,0],[91,20,41,24,"_captureConsoleStackTrace"],[91,45,41,49],[91,47,7,0],[92,0,43,16,"errorMessage"],[92,12,43,16,"errorMessage"],[92,25,7,0],[92,28,43,31,"_stringifyLogData"],[92,45,43,48],[92,46,43,49,"data"],[92,50,43,48],[92,51,43,31],[92,52,43,55,"join"],[92,56,43,31],[92,57,43,60],[92,61,43,31],[92,62,7,0],[93,0,7,0],[94,0,7,0],[94,46,44,40,"_serializeErrorAsync"],[94,66,44,60],[94,67,44,61,"error"],[94,72,44,60],[94,74,44,68,"errorMessage"],[94,87,44,60],[94,88,7,0],[96,0,7,0],[97,0,44,16,"serializedError"],[97,12,44,16,"serializedError"],[97,28,7,0],[98,0,45,12,"serializedValues"],[98,12,45,12,"serializedValues"],[98,28,45,28],[98,31,45,31],[98,32,45,32,"serializedError"],[98,48,45,31],[98,49,45,12],[99,0,46,12,"includesStack"],[99,12,46,12,"includesStack"],[99,25,46,25],[99,28,46,28,"serializedError"],[99,44,46,43],[99,45,46,44,"hasOwnProperty"],[99,59,46,28],[99,60,46,59],[99,67,46,28],[99,68,46,12],[100,0,7,0],[101,0,7,0],[103,0,7,0],[104,0,49,12,"serializedValues"],[104,12,49,12,"serializedValues"],[104,28,49,28],[104,31,49,31,"_stringifyLogData"],[104,48,49,48],[104,49,49,49,"data"],[104,53,49,48],[104,54,49,12],[106,0,7,0],[107,0,7,0],[108,0,7,0],[110,0,7,0],[111,0,53,8,"serializedValues"],[111,12,53,8,"serializedValues"],[111,28,53,24],[111,31,53,27,"_stringifyLogData"],[111,48,53,44],[111,49,53,45,"data"],[111,53,53,44],[111,54,53,8],[113,0,7,0],[114,0,7,0],[114,45,55,11],[115,0,56,8,"body"],[115,14,56,8,"body"],[115,18,56,12],[115,53,56,18,"serializedValues"],[115,69,56,12],[115,70,55,11],[116,0,57,8,"includesStack"],[116,14,57,8,"includesStack"],[116,27,57,21],[116,29,57,8,"includesStack"],[117,0,55,11],[117,13,7,0],[119,0,7,0],[120,0,7,0],[121,0,7,0],[122,0,7,0],[123,0,7,0],[124,0,7,0],[125,0,7,0],[127,0,60,0],[127,11,60,9,"_stringifyLogData"],[127,28,60,0],[127,29,60,27,"data"],[127,33,60,0],[127,35,60,33],[128,0,61,4],[128,11,61,11,"data"],[128,15,61,15],[128,16,61,16,"map"],[128,19,61,11],[128,20,61,20],[128,30,61,20,"item"],[128,34,61,24],[128,36,61,28],[129,0,62,8],[129,10,62,12],[129,17,62,19,"item"],[129,21,62,12],[129,26,62,28],[129,34,62,8],[129,36,62,38],[130,0,63,12],[130,15,63,19,"item"],[130,19,63,12],[131,0,64,9],[131,7,62,8],[131,13,65,13],[132,0,66,12],[132,15,66,19],[132,42,66,32,"item"],[132,46,66,19],[132,48,66,38],[133,0,66,40,"plugins"],[133,10,66,40,"plugins"],[133,17,66,47],[133,19,66,49],[133,20,66,50,"ReactNodeFormatter"],[133,47,66,49],[134,0,66,38],[134,9,66,19],[134,10,66,12],[135,0,67,9],[136,0,68,5],[136,5,61,11],[136,6,61,4],[137,0,69,1],[139,0,70,0],[139,11,70,15,"_serializeErrorAsync"],[139,31,70,0],[139,32,70,36,"error"],[139,37,70,0],[139,39,70,43,"message"],[139,46,70,0],[140,0,70,0],[141,0,70,0],[142,0,70,0],[143,0,70,0],[144,0,70,0],[145,0,71,4],[145,16,71,8,"message"],[145,23,71,15],[145,27,71,19],[145,31,71,4],[145,33,71,25],[146,0,72,8,"message"],[146,14,72,8,"message"],[146,21,72,15],[146,24,72,18,"error"],[146,29,72,23],[146,30,72,24,"message"],[146,37,72,8],[147,0,73,5],[149,0,70,0],[149,18,74,8],[149,19,74,9,"error"],[149,24,74,14],[149,25,74,15,"stack"],[149,30,74,8],[149,34,74,24],[149,35,74,25,"error"],[149,40,74,30],[149,41,74,31,"stack"],[149,46,74,25],[149,47,74,37,"length"],[149,53,70,0],[150,0,70,0],[151,0,70,0],[152,0,70,0],[154,0,70,0],[154,46,75,15],[154,73,75,28,"error"],[154,78,75,15],[154,79,70,0],[156,0,70,0],[157,0,70,0],[158,0,70,0],[158,46,77,22,"_symbolicateErrorAsync"],[158,68,77,44],[158,69,77,45,"error"],[158,74,77,44],[158,75,70,0],[160,0,70,0],[161,0,77,8,"stack"],[161,12,77,8,"stack"],[161,17,70,0],[162,0,78,8,"formattedStack"],[162,12,78,8,"formattedStack"],[162,26,70,0],[162,29,78,25,"_formatStack"],[162,41,78,37],[162,42,78,38,"stack"],[162,47,78,37],[162,48,70,0],[163,0,70,0],[163,46,79,11],[164,0,79,13,"message"],[164,14,79,13,"message"],[164,21,79,20],[164,23,79,13,"message"],[164,30,79,11],[165,0,79,22,"stack"],[165,14,79,22,"stack"],[165,19,79,27],[165,21,79,29,"formattedStack"],[166,0,79,11],[166,13,70,0],[168,0,70,0],[169,0,70,0],[170,0,70,0],[171,0,70,0],[172,0,70,0],[173,0,70,0],[174,0,70,0],[176,0,81,0],[176,11,81,15,"_symbolicateErrorAsync"],[176,33,81,0],[176,34,81,38,"error"],[176,39,81,0],[177,0,81,0],[178,0,81,0],[179,0,81,0],[180,0,81,0],[181,0,81,0],[182,0,82,8,"parsedStack"],[182,12,82,8,"parsedStack"],[182,23,81,0],[182,26,82,22],[182,56,82,38,"error"],[182,61,82,22],[182,62,81,0],[183,0,81,0],[184,0,81,0],[185,0,81,0],[185,46,85,34],[185,82,85,56,"parsedStack"],[185,93,85,34],[185,94,81,0],[187,0,81,0],[188,0,85,8,"symbolicatedStack"],[188,12,85,8,"symbolicatedStack"],[188,29,81,0],[189,0,81,0],[190,0,81,0],[192,0,81,0],[193,0,81,0],[194,0,81,0],[195,0,81,0],[195,46,88,15,"parsedStack"],[195,57,81,0],[197,0,81,0],[198,0,81,0],[198,16,91,9,"symbolicatedStack"],[198,33,81,0],[199,0,81,0],[200,0,81,0],[201,0,81,0],[203,0,81,0],[203,46,92,15,"parsedStack"],[203,57,81,0],[205,0,81,0],[206,0,81,0],[206,46,95,11,"symbolicatedStack"],[206,63,95,28],[206,64,95,29,"map"],[206,67,95,11],[206,68,95,33,"_removeProjectRoot"],[206,86,95,11],[206,87,81,0],[208,0,81,0],[209,0,81,0],[210,0,81,0],[211,0,81,0],[212,0,81,0],[213,0,81,0],[214,0,81,0],[216,0,97,0],[216,11,97,9,"_formatStack"],[216,23,97,0],[216,24,97,22,"stack"],[216,29,97,0],[216,31,97,29],[217,0,98,4],[217,11,98,11,"stack"],[217,16,98,16],[217,17,99,9,"map"],[217,20,98,11],[217,21,99,13],[217,31,99,13,"frame"],[217,36,99,18],[217,38,99,22],[218,0,100,8],[218,10,100,12,"line"],[218,14,100,16],[218,17,100,22,"frame"],[218,22,100,27],[218,23,100,28,"file"],[218,27,100,16],[218,36,100,36,"frame"],[218,41,100,41],[218,42,100,42,"lineNumber"],[218,52,100,8],[220,0,101,8],[220,10,101,12,"frame"],[220,15,101,17],[220,16,101,18,"column"],[220,22,101,12],[220,26,101,28],[220,30,101,8],[220,32,101,34],[221,0,102,12,"line"],[221,8,102,12,"line"],[221,12,102,16],[221,22,102,24,"frame"],[221,27,102,29],[221,28,102,30,"column"],[221,34,102,12],[222,0,103,9],[224,0,104,8,"line"],[224,6,104,8,"line"],[224,10,104,12],[224,23,104,23,"frame"],[224,28,104,28],[224,29,104,29,"methodName"],[224,39,104,8],[225,0,105,8],[225,13,105,15,"line"],[225,17,105,8],[226,0,106,5],[226,5,98,11],[226,7,107,9,"join"],[226,11,98,11],[226,12,107,14],[226,16,98,11],[226,17,98,4],[227,0,108,1],[229,0,109,0],[229,11,109,9,"_removeProjectRoot"],[229,29,109,0],[229,30,109,28,"frame"],[229,35,109,0],[229,37,109,35],[230,0,110,4],[230,8,110,8,"filename"],[230,16,110,16],[230,19,110,19,"frame"],[230,24,110,24],[230,25,110,25,"file"],[230,29,110,4],[232,0,111,4],[232,8,111,8,"filename"],[232,16,111,16],[232,20,111,20],[232,24,111,4],[232,26,111,26],[233,0,112,8],[233,13,112,15,"frame"],[233,18,112,8],[234,0,113,5],[236,0,114,4],[236,8,114,8,"projectRoot"],[236,19,114,19],[236,22,114,22,"_getProjectRoot"],[236,37,114,37],[236,39,114,4],[238,0,115,4],[238,8,115,8,"projectRoot"],[238,19,115,19],[238,23,115,23],[238,27,115,4],[238,29,115,29],[239,0,116,8],[239,13,116,15,"frame"],[239,18,116,8],[240,0,117,5],[242,0,118,4],[242,8,118,8,"filename"],[242,16,118,16],[242,17,118,17,"startsWith"],[242,27,118,8],[242,28,118,28,"projectRoot"],[242,39,118,8],[242,40,118,4],[242,42,118,42],[243,0,119,8,"filename"],[243,6,119,8,"filename"],[243,14,119,16],[243,17,119,19,"filename"],[243,25,119,27],[243,26,119,28,"substring"],[243,35,119,19],[243,36,119,38,"projectRoot"],[243,47,119,49],[243,48,119,50,"length"],[243,54,119,19],[243,55,119,8],[245,0,120,8],[245,10,120,12,"filename"],[245,18,120,20],[245,19,120,21],[245,20,120,20],[245,21,120,12],[245,26,120,28],[245,29,120,12],[245,33,120,35,"filename"],[245,41,120,43],[245,42,120,44],[245,43,120,43],[245,44,120,35],[245,49,120,51],[245,53,120,8],[245,55,120,57],[246,0,121,12,"filename"],[246,8,121,12,"filename"],[246,16,121,20],[246,19,121,23,"filename"],[246,27,121,31],[246,28,121,32,"substring"],[246,37,121,23],[246,38,121,42],[246,39,121,23],[246,40,121,12],[247,0,122,9],[249,0,123,8,"frame"],[249,6,123,8,"frame"],[249,11,123,13],[249,12,123,14,"file"],[249,16,123,8],[249,19,123,21,"filename"],[249,27,123,8],[250,0,124,5],[252,0,125,4],[252,11,125,11,"frame"],[252,16,125,4],[253,0,126,1],[255,0,136,0],[255,11,136,9,"_stackTraceLogsSupported"],[255,35,136,0],[255,38,136,36],[256,0,137,4],[256,11,137,11],[256,12,137,12],[256,14,137,14,"__DEV__"],[256,21,137,21],[256,25,137,25,"_getProjectRoot"],[256,40,137,40],[256,42,137,12],[256,43,137,4],[257,0,138,1],[259,0,139,0],[259,11,139,9,"_isUnhandledPromiseRejection"],[259,39,139,0],[259,40,139,38,"data"],[259,44,139,0],[259,46,139,44,"level"],[259,51,139,0],[259,53,139,51],[260,0,140,4],[260,11,140,12,"level"],[260,16,140,17],[260,21,140,22],[260,27,140,12],[260,31,141,8],[260,38,141,15,"data"],[260,42,141,19],[260,43,141,20],[260,44,141,19],[260,45,141,8],[260,50,141,27],[260,58,140,12],[260,62,142,8],[260,102,142,48,"test"],[260,106,142,8],[260,107,142,53,"data"],[260,111,142,57],[260,112,142,58],[260,113,142,57],[260,114,142,8],[260,115,140,4],[261,0,143,1],[263,0,144,0],[263,11,144,9,"_captureConsoleStackTrace"],[263,36,144,0],[263,39,144,37],[264,0,145,4],[264,8,145,8],[265,0,146,8],[265,12,146,14],[265,16,146,18,"Error"],[265,21,146,14],[265,23,146,8],[266,0,147,5],[266,5,145,4],[266,6,148,4],[266,13,148,11,"error"],[266,18,148,4],[266,20,148,18],[267,0,149,8],[267,10,149,12,"stackLines"],[267,20,149,22],[267,23,149,25,"error"],[267,28,149,30],[267,29,149,31,"stack"],[267,34,149,25],[267,35,149,37,"split"],[267,40,149,25],[267,41,149,43],[267,45,149,25],[267,46,149,8],[268,0,150,8],[268,10,150,12,"consoleMethodIndex"],[268,28,150,30],[268,31,150,33,"stackLines"],[268,41,150,43],[268,42,150,44,"findIndex"],[268,51,150,33],[268,52,150,54],[268,62,150,54,"frame"],[268,67,150,59],[269,0,150,59],[269,15,150,63,"frame"],[269,20,150,68],[269,21,150,69,"includes"],[269,29,150,63],[269,30,150,78,"EXPO_CONSOLE_METHOD_NAME"],[269,54,150,63],[269,55,150,59],[270,0,150,59],[270,7,150,33],[270,8,150,8],[272,0,151,8],[272,10,151,12,"consoleMethodIndex"],[272,28,151,30],[272,33,151,35],[272,34,151,36],[272,35,151,8],[272,37,151,39],[273,0,152,12,"stackLines"],[273,8,152,12,"stackLines"],[273,18,152,22],[273,21,152,25,"stackLines"],[273,31,152,35],[273,32,152,36,"slice"],[273,37,152,25],[273,38,152,42,"consoleMethodIndex"],[273,56,152,60],[273,59,152,63],[273,60,152,25],[273,61,152,12],[274,0,153,12,"error"],[274,8,153,12,"error"],[274,13,153,17],[274,14,153,18,"stack"],[274,19,153,12],[274,22,153,26,"stackLines"],[274,32,153,36],[274,33,153,37,"join"],[274,37,153,26],[274,38,153,42],[274,42,153,26],[274,43,153,12],[275,0,154,9],[277,0,155,8],[277,13,155,15,"error"],[277,18,155,8],[278,0,156,5],[279,0,157,1],[281,0,158,0],[281,11,158,9,"_getProjectRoot"],[281,26,158,0],[281,29,158,27],[282,0,159,4],[282,11,159,11,"Constants"],[282,34,159,21,"manifest"],[282,42,159,11],[282,46,159,33,"Constants"],[282,69,159,43,"manifest"],[282,77,159,33],[282,78,159,52,"developer"],[282,87,159,11],[282,90,160,10,"Constants"],[282,113,160,20,"manifest"],[282,121,160,10],[282,122,160,29,"developer"],[282,131,160,10],[282,132,160,39,"projectRoot"],[282,143,159,11],[282,146,161,10],[282,150,159,4],[283,0,162,1],[285,17,163,15],[286,0,164,4,"serializeLogDataAsync"],[286,4,164,4,"serializeLogDataAsync"],[286,25,164,25],[286,27,164,4,"serializeLogDataAsync"],[287,0,163,15],[287,3]]},"type":"js/module"}]}