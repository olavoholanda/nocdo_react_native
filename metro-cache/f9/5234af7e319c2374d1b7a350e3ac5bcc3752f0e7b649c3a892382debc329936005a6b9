{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"expo-core","data":{"isAsync":false}},{"name":"expo-errors","data":{"isAsync":false}},{"name":"./ExpoTaskManager","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defineTask = defineTask;\n  exports.isTaskDefined = isTaskDefined;\n  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;\n  exports.getTaskOptionsAsync = getTaskOptionsAsync;\n  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;\n  exports.unregisterTaskAsync = unregisterTaskAsync;\n  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _expoCore = _$$_REQUIRE(_dependencyMap[2], \"expo-core\");\n\n  var _expoErrors = _$$_REQUIRE(_dependencyMap[3], \"expo-errors\");\n\n  var _ExpoTaskManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./ExpoTaskManager\"));\n\n  var eventEmitter = new _expoCore.EventEmitter(_ExpoTaskManager.default);\n  var tasks = new Map();\n  var isRunningDuringInitialization = true;\n\n  function _validateTaskName(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new TypeError('`taskName` must be a non-empty string.');\n    }\n  }\n\n  function defineTask(taskName, task) {\n    if (!isRunningDuringInitialization) {\n      console.error(\"TaskManager.defineTask must be called during initialization phase!\");\n      return;\n    }\n\n    if (!taskName || typeof taskName !== 'string') {\n      console.warn(\"TaskManager.defineTask: 'taskName' argument must be a non-empty string.\");\n      return;\n    }\n\n    if (!task || typeof task !== 'function') {\n      console.warn(\"TaskManager.defineTask: 'task' argument must be a function.\");\n      return;\n    }\n\n    if (tasks.has(taskName)) {\n      console.warn(\"TaskManager.defineTask: task '\" + taskName + \"' is already defined.\");\n      return;\n    }\n\n    tasks.set(taskName, task);\n  }\n\n  function isTaskDefined(taskName) {\n    return tasks.has(taskName);\n  }\n\n  function isTaskRegisteredAsync(taskName) {\n    return _regenerator.default.async(function isTaskRegisteredAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (_ExpoTaskManager.default.isTaskRegisteredAsync) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new _expoErrors.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            return _context.abrupt(\"return\", _ExpoTaskManager.default.isTaskRegisteredAsync(taskName));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function getTaskOptionsAsync(taskName) {\n    return _regenerator.default.async(function getTaskOptionsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (_ExpoTaskManager.default.getTaskOptionsAsync) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new _expoErrors.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            return _context2.abrupt(\"return\", _ExpoTaskManager.default.getTaskOptionsAsync(taskName));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function getRegisteredTasksAsync() {\n    return _regenerator.default.async(function getRegisteredTasksAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (_ExpoTaskManager.default.getRegisteredTasksAsync) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _expoErrors.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n\n          case 2:\n            return _context3.abrupt(\"return\", _ExpoTaskManager.default.getRegisteredTasksAsync());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function unregisterTaskAsync(taskName) {\n    return _regenerator.default.async(function unregisterTaskAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (_ExpoTaskManager.default.unregisterTaskAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new _expoErrors.UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n\n          case 2:\n            _validateTaskName(taskName);\n\n            _context4.next = 5;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function unregisterAllTasksAsync() {\n    return _regenerator.default.async(function unregisterAllTasksAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (_ExpoTaskManager.default.unregisterAllTasksAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new _expoErrors.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n\n          case 2:\n            _context5.next = 4;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterAllTasksAsync());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  eventEmitter.addListener(_ExpoTaskManager.default.EVENT_NAME, function _callee(_ref) {\n    var data, error, executionInfo, eventId, taskName, task, result;\n    return _regenerator.default.async(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            data = _ref.data, error = _ref.error, executionInfo = _ref.executionInfo;\n            eventId = executionInfo.eventId, taskName = executionInfo.taskName;\n            task = tasks.get(taskName);\n            result = null;\n\n            if (!task) {\n              _context6.next = 20;\n              break;\n            }\n\n            _context6.prev = 5;\n            _context6.next = 8;\n            return _regenerator.default.awrap(task({\n              data: data,\n              error: error,\n              executionInfo: executionInfo\n            }));\n\n          case 8:\n            result = _context6.sent;\n            _context6.next = 14;\n            break;\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](5);\n            console.error(\"TaskManager: Task \\\"\" + taskName + \"\\\" failed:\", _context6.t0);\n\n          case 14:\n            _context6.prev = 14;\n            _context6.next = 17;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId: eventId,\n              result: result\n            }));\n\n          case 17:\n            return _context6.finish(14);\n\n          case 18:\n            _context6.next = 25;\n            break;\n\n          case 20:\n            console.warn(\"TaskManager: Task \\\"\" + taskName + \"\\\" has been executed but looks like it is not defined. Please make sure that \\\"TaskManager.defineTask\\\" is called during initialization phase.\");\n            _context6.next = 23;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId: eventId,\n              result: result\n            }));\n\n          case 23:\n            _context6.next = 25;\n            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));\n\n          case 25:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, this, [[5, 11, 14, 18]]);\n  });\n  Promise.resolve().then(function () {\n    isRunningDuringInitialization = false;\n  });\n});","map":[[17,0,1,0],[19,0,2,0],[21,0,3,0],[23,0,4,0],[23,6,4,6,"eventEmitter"],[23,18,4,18],[23,21,4,21],[23,25,4,25,"EventEmitter"],[23,47,4,21],[23,48,4,38,"ExpoTaskManager"],[23,72,4,21],[23,73,4,0],[24,0,5,0],[24,6,5,6,"tasks"],[24,11,5,11],[24,14,5,14],[24,18,5,18,"Map"],[24,21,5,14],[24,23,5,0],[25,0,6,0],[25,6,6,4,"isRunningDuringInitialization"],[25,35,6,33],[25,38,6,36],[25,42,6,0],[27,0,7,0],[27,11,7,9,"_validateTaskName"],[27,28,7,0],[27,29,7,27,"taskName"],[27,37,7,0],[27,39,7,37],[28,0,8,4],[28,8,8,8],[28,9,8,9,"taskName"],[28,17,8,8],[28,21,8,21],[28,28,8,28,"taskName"],[28,36,8,21],[28,41,8,41],[28,49,8,4],[28,51,8,51],[29,0,9,8],[29,12,9,14],[29,16,9,18,"TypeError"],[29,25,9,14],[29,26,9,28],[29,66,9,14],[29,67,9,8],[30,0,10,5],[31,0,11,1],[33,0,12,7],[33,11,12,16,"defineTask"],[33,21,12,7],[33,22,12,27,"taskName"],[33,30,12,7],[33,32,12,37,"task"],[33,36,12,7],[33,38,12,43],[34,0,13,4],[34,8,13,8],[34,9,13,9,"isRunningDuringInitialization"],[34,38,13,4],[34,40,13,40],[35,0,14,8,"console"],[35,6,14,8,"console"],[35,13,14,15],[35,14,14,16,"error"],[35,19,14,8],[36,0,15,8],[37,0,16,5],[39,0,17,4],[39,8,17,8],[39,9,17,9,"taskName"],[39,17,17,8],[39,21,17,21],[39,28,17,28,"taskName"],[39,36,17,21],[39,41,17,41],[39,49,17,4],[39,51,17,51],[40,0,18,8,"console"],[40,6,18,8,"console"],[40,13,18,15],[40,14,18,16,"warn"],[40,18,18,8],[41,0,19,8],[42,0,20,5],[44,0,21,4],[44,8,21,8],[44,9,21,9,"task"],[44,13,21,8],[44,17,21,17],[44,24,21,24,"task"],[44,28,21,17],[44,33,21,33],[44,43,21,4],[44,45,21,45],[45,0,22,8,"console"],[45,6,22,8,"console"],[45,13,22,15],[45,14,22,16,"warn"],[45,18,22,8],[46,0,23,8],[47,0,24,5],[49,0,25,4],[49,8,25,8,"tasks"],[49,13,25,13],[49,14,25,14,"has"],[49,17,25,8],[49,18,25,18,"taskName"],[49,26,25,8],[49,27,25,4],[49,29,25,29],[50,0,26,8,"console"],[50,6,26,8,"console"],[50,13,26,15],[50,14,26,16,"warn"],[50,18,26,8],[50,54,26,54,"taskName"],[50,62,26,8],[51,0,27,8],[52,0,28,5],[54,0,29,4,"tasks"],[54,4,29,4,"tasks"],[54,9,29,9],[54,10,29,10,"set"],[54,13,29,4],[54,14,29,14,"taskName"],[54,22,29,4],[54,24,29,24,"task"],[54,28,29,4],[55,0,30,1],[57,0,31,7],[57,11,31,16,"isTaskDefined"],[57,24,31,7],[57,25,31,30,"taskName"],[57,33,31,7],[57,35,31,40],[58,0,32,4],[58,11,32,11,"tasks"],[58,16,32,16],[58,17,32,17,"has"],[58,20,32,11],[58,21,32,21,"taskName"],[58,29,32,11],[58,30,32,4],[59,0,33,1],[61,0,34,7],[61,11,34,22,"isTaskRegisteredAsync"],[61,32,34,7],[61,33,34,44,"taskName"],[61,41,34,7],[62,0,34,7],[63,0,34,7],[64,0,34,7],[65,0,34,7],[66,0,34,7],[66,16,35,9,"ExpoTaskManager"],[66,41,35,25,"isTaskRegisteredAsync"],[66,62,34,7],[67,0,34,7],[68,0,34,7],[69,0,34,7],[71,0,34,7],[71,18,36,14],[71,22,36,18,"UnavailabilityError"],[71,53,36,14],[71,54,36,38],[71,67,36,14],[71,69,36,53],[71,92,36,14],[71,93,34,7],[73,0,34,7],[74,0,38,4,"_validateTaskName"],[74,12,38,4,"_validateTaskName"],[74,29,38,21],[74,30,38,22,"taskName"],[74,38,38,21],[74,39,38,4],[76,0,34,7],[76,45,39,11,"ExpoTaskManager"],[76,70,39,27,"isTaskRegisteredAsync"],[76,91,39,11],[76,92,39,49,"taskName"],[76,100,39,11],[76,101,34,7],[78,0,34,7],[79,0,34,7],[80,0,34,7],[81,0,34,7],[82,0,34,7],[83,0,34,7],[84,0,34,7],[86,0,41,7],[86,11,41,22,"getTaskOptionsAsync"],[86,30,41,7],[86,31,41,42,"taskName"],[86,39,41,7],[87,0,41,7],[88,0,41,7],[89,0,41,7],[90,0,41,7],[91,0,41,7],[91,16,42,9,"ExpoTaskManager"],[91,41,42,25,"getTaskOptionsAsync"],[91,60,41,7],[92,0,41,7],[93,0,41,7],[94,0,41,7],[96,0,41,7],[96,18,43,14],[96,22,43,18,"UnavailabilityError"],[96,53,43,14],[96,54,43,38],[96,67,43,14],[96,69,43,53],[96,90,43,14],[96,91,41,7],[98,0,41,7],[99,0,45,4,"_validateTaskName"],[99,12,45,4,"_validateTaskName"],[99,29,45,21],[99,30,45,22,"taskName"],[99,38,45,21],[99,39,45,4],[101,0,41,7],[101,46,46,11,"ExpoTaskManager"],[101,71,46,27,"getTaskOptionsAsync"],[101,90,46,11],[101,91,46,47,"taskName"],[101,99,46,11],[101,100,41,7],[103,0,41,7],[104,0,41,7],[105,0,41,7],[106,0,41,7],[107,0,41,7],[108,0,41,7],[109,0,41,7],[111,0,48,7],[111,11,48,22,"getRegisteredTasksAsync"],[111,34,48,7],[112,0,48,7],[113,0,48,7],[114,0,48,7],[115,0,48,7],[116,0,48,7],[116,16,49,9,"ExpoTaskManager"],[116,41,49,25,"getRegisteredTasksAsync"],[116,64,48,7],[117,0,48,7],[118,0,48,7],[119,0,48,7],[121,0,48,7],[121,18,50,14],[121,22,50,18,"UnavailabilityError"],[121,53,50,14],[121,54,50,38],[121,67,50,14],[121,69,50,53],[121,94,50,14],[121,95,48,7],[123,0,48,7],[124,0,48,7],[124,46,52,11,"ExpoTaskManager"],[124,71,52,27,"getRegisteredTasksAsync"],[124,94,52,11],[124,96,48,7],[126,0,48,7],[127,0,48,7],[128,0,48,7],[129,0,48,7],[130,0,48,7],[131,0,48,7],[132,0,48,7],[134,0,54,7],[134,11,54,22,"unregisterTaskAsync"],[134,30,54,7],[134,31,54,42,"taskName"],[134,39,54,7],[135,0,54,7],[136,0,54,7],[137,0,54,7],[138,0,54,7],[139,0,54,7],[139,16,55,9,"ExpoTaskManager"],[139,41,55,25,"unregisterTaskAsync"],[139,60,54,7],[140,0,54,7],[141,0,54,7],[142,0,54,7],[144,0,54,7],[144,18,56,14],[144,22,56,18,"UnavailabilityError"],[144,53,56,14],[144,54,56,38],[144,67,56,14],[144,69,56,53],[144,90,56,14],[144,91,54,7],[146,0,54,7],[147,0,58,4,"_validateTaskName"],[147,12,58,4,"_validateTaskName"],[147,29,58,21],[147,30,58,22,"taskName"],[147,38,58,21],[147,39,58,4],[149,0,54,7],[150,0,54,7],[150,46,59,10,"ExpoTaskManager"],[150,71,59,26,"unregisterTaskAsync"],[150,90,59,10],[150,91,59,46,"taskName"],[150,99,59,10],[150,100,54,7],[152,0,54,7],[153,0,54,7],[154,0,54,7],[155,0,54,7],[156,0,54,7],[157,0,54,7],[158,0,54,7],[160,0,61,7],[160,11,61,22,"unregisterAllTasksAsync"],[160,34,61,7],[161,0,61,7],[162,0,61,7],[163,0,61,7],[164,0,61,7],[165,0,61,7],[165,16,62,9,"ExpoTaskManager"],[165,41,62,25,"unregisterAllTasksAsync"],[165,64,61,7],[166,0,61,7],[167,0,61,7],[168,0,61,7],[170,0,61,7],[170,18,63,14],[170,22,63,18,"UnavailabilityError"],[170,53,63,14],[170,54,63,38],[170,67,63,14],[170,69,63,53],[170,94,63,14],[170,95,61,7],[172,0,61,7],[173,0,61,7],[174,0,61,7],[174,46,65,10,"ExpoTaskManager"],[174,71,65,26,"unregisterAllTasksAsync"],[174,94,65,10],[174,96,61,7],[176,0,61,7],[177,0,61,7],[178,0,61,7],[179,0,61,7],[180,0,61,7],[181,0,61,7],[182,0,61,7],[184,0,67,0,"eventEmitter"],[184,2,67,0,"eventEmitter"],[184,14,67,12],[184,15,67,13,"addListener"],[184,26,67,0],[184,27,67,25,"ExpoTaskManager"],[184,52,67,41,"EVENT_NAME"],[184,62,67,0],[184,64,67,53],[185,0,67,53],[186,0,67,53],[187,0,67,53],[188,0,67,53],[189,0,67,53],[190,0,67,62,"data"],[190,12,67,62,"data"],[190,16,67,53],[190,24,67,62,"data"],[190,28,67,53],[190,30,67,68,"error"],[190,35,67,53],[190,43,67,68,"error"],[190,48,67,53],[190,50,67,75,"executionInfo"],[190,63,67,53],[190,71,67,75,"executionInfo"],[190,84,67,53],[191,0,68,12,"eventId"],[191,12,68,12,"eventId"],[191,19,67,53],[191,22,68,34,"executionInfo"],[191,35,67,53],[191,36,68,12,"eventId"],[191,43,67,53],[191,45,68,21,"taskName"],[191,53,67,53],[191,56,68,34,"executionInfo"],[191,69,67,53],[191,70,68,21,"taskName"],[191,78,67,53],[192,0,69,10,"task"],[192,12,69,10,"task"],[192,16,67,53],[192,19,69,17,"tasks"],[192,24,69,22],[192,25,69,23,"get"],[192,28,69,17],[192,29,69,27,"taskName"],[192,37,69,17],[192,38,67,53],[193,0,70,8,"result"],[193,12,70,8,"result"],[193,18,67,53],[193,21,70,17],[193,25,67,53],[195,0,67,53],[195,17,71,8,"task"],[195,21,67,53],[196,0,67,53],[197,0,67,53],[198,0,67,53],[200,0,67,53],[201,0,67,53],[202,0,67,53],[202,46,74,27,"task"],[202,50,74,31],[202,51,74,32],[203,0,74,34,"data"],[203,14,74,34,"data"],[203,18,74,38],[203,20,74,34,"data"],[203,24,74,32],[204,0,74,40,"error"],[204,14,74,40,"error"],[204,19,74,45],[204,21,74,40,"error"],[204,26,74,32],[205,0,74,47,"executionInfo"],[205,14,74,47,"executionInfo"],[205,27,74,60],[205,29,74,47,"executionInfo"],[206,0,74,32],[206,13,74,31],[206,14,67,53],[208,0,67,53],[209,0,74,12,"result"],[209,12,74,12,"result"],[209,18,67,53],[210,0,67,53],[211,0,67,53],[213,0,67,53],[214,0,67,53],[215,0,67,53],[216,0,77,12,"console"],[216,12,77,12,"console"],[216,19,77,19],[216,20,77,20,"error"],[216,25,77,12],[216,51,77,48,"taskName"],[216,59,77,12],[218,0,67,53],[219,0,67,53],[220,0,67,53],[221,0,67,53],[221,46,81,18,"ExpoTaskManager"],[221,71,81,34,"notifyTaskFinishedAsync"],[221,94,81,18],[221,95,81,58,"taskName"],[221,103,81,18],[221,105,81,68],[222,0,81,70,"eventId"],[222,14,81,70,"eventId"],[222,21,81,77],[222,23,81,70,"eventId"],[222,30,81,68],[223,0,81,79,"result"],[223,14,81,79,"result"],[223,20,81,85],[223,22,81,79,"result"],[224,0,81,68],[224,13,81,18],[224,14,67,53],[226,0,67,53],[227,0,67,53],[229,0,67,53],[230,0,67,53],[231,0,67,53],[233,0,67,53],[234,0,85,8,"console"],[234,12,85,8,"console"],[234,19,85,15],[234,20,85,16,"warn"],[234,24,85,8],[234,50,85,43,"taskName"],[234,58,85,8],[235,0,67,53],[236,0,67,53],[236,46,87,14,"ExpoTaskManager"],[236,71,87,30,"notifyTaskFinishedAsync"],[236,94,87,14],[236,95,87,54,"taskName"],[236,103,87,14],[236,105,87,64],[237,0,87,66,"eventId"],[237,14,87,66,"eventId"],[237,21,87,73],[237,23,87,66,"eventId"],[237,30,87,64],[238,0,87,75,"result"],[238,14,87,75,"result"],[238,20,87,81],[238,22,87,75,"result"],[239,0,87,64],[239,13,87,14],[239,14,67,53],[241,0,67,53],[242,0,67,53],[243,0,67,53],[243,46,90,14,"ExpoTaskManager"],[243,71,90,30,"unregisterTaskAsync"],[243,90,90,14],[243,91,90,50,"taskName"],[243,99,90,14],[243,100,67,53],[245,0,67,53],[246,0,67,53],[247,0,67,53],[248,0,67,53],[249,0,67,53],[250,0,67,53],[251,0,67,53],[251,3,67,0],[252,0,95,0,"Promise"],[252,2,95,0,"Promise"],[252,9,95,7],[252,10,95,8,"resolve"],[252,17,95,0],[252,20,95,18,"then"],[252,24,95,0],[252,25,95,23],[252,37,95,29],[253,0,96,4,"isRunningDuringInitialization"],[253,4,96,4,"isRunningDuringInitialization"],[253,33,96,33],[253,36,96,36],[253,41,96,4],[254,0,97,1],[254,3,95,0]]},"type":"js/module"}]}