{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/objectSpread","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"fbemitter","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"uuid-js","data":{"isAsync":false}},{"name":"./LogSerialization","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.__waitForEmptyLogQueueAsync = __waitForEmptyLogQueueAsync;\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/objectSpread\"));\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n\n  var _fbemitter = _$$_REQUIRE(_dependencyMap[4], \"fbemitter\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"invariant\"));\n\n  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"uuid-js\"));\n\n  var _LogSerialization = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./LogSerialization\"));\n\n  var _sessionId = _uuidJs.default.create().toString();\n\n  var _logQueue = [];\n\n  var _transportEventEmitter = new _fbemitter.EventEmitter();\n\n  var _logCounter = 0;\n  var _isSendingLogs = false;\n  var _completionPromise = null;\n  var _resolveCompletion2 = null;\n\n  function enqueueRemoteLogAsync(level, additionalFields, data) {\n    var warning, lines, _ref, body, includesStack;\n\n    return _regenerator.default.async(function enqueueRemoteLogAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!_isReactNativeWarning(data)) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!(data.length === 0)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(\"Warnings must include log arguments\");\n\n          case 3:\n            warning = data[0];\n\n            if (!(typeof warning !== 'string')) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new TypeError(\"The log argument for a warning must be a string\");\n\n          case 6:\n            lines = warning.split('\\n');\n\n            if (lines.length > 1 && /^\\s+in /.test(lines[1])) {\n              data[0] = lines[0];\n            }\n\n          case 8:\n            _context.next = 10;\n            return _regenerator.default.awrap(_LogSerialization.default.serializeLogDataAsync(data, level));\n\n          case 10:\n            _ref = _context.sent;\n            body = _ref.body;\n            includesStack = _ref.includesStack;\n\n            _logQueue.push((0, _objectSpread2.default)({\n              count: _logCounter++,\n              level: level,\n              body: body,\n              includesStack: includesStack\n            }, additionalFields));\n\n            _sendRemoteLogsAsync().catch(function (error) {\n              setImmediate(function () {\n                throw error;\n              });\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _sendRemoteLogsAsync() {\n    var batch, logUrl;\n    return _regenerator.default.async(function _sendRemoteLogsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_isSendingLogs || !_logQueue.length)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            batch = _logQueue.splice(0);\n            logUrl = _expoConstants.default.manifest.logUrl;\n            (0, _invariant.default)(typeof logUrl === 'string', 'The Expo project manifest must specify `logUrl`');\n            _isSendingLogs = true;\n            _context2.prev = 6;\n            _context2.next = 9;\n            return _regenerator.default.awrap(_sendNextLogBatchAsync(batch, logUrl));\n\n          case 9:\n            _context2.prev = 9;\n            _isSendingLogs = false;\n            return _context2.finish(9);\n\n          case 12:\n            if (!_logQueue.length) {\n              _context2.next = 16;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _sendRemoteLogsAsync());\n\n          case 16:\n            if (_resolveCompletion2) {\n              _resolveCompletion2();\n            }\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, [[6,, 9, 12]]);\n  }\n\n  function _sendNextLogBatchAsync(batch, logUrl) {\n    var response, success;\n    return _regenerator.default.async(function _sendNextLogBatchAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regenerator.default.awrap(fetch(logUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Connection: 'keep-alive',\n                'Proxy-Connection': 'keep-alive',\n                Accept: 'application/json',\n                'Device-Id': _expoConstants.default.installationId,\n                'Device-Name': _expoConstants.default.deviceName,\n                'Session-Id': _sessionId\n              },\n              body: JSON.stringify(batch)\n            }));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n\n            _transportEventEmitter.emit('error', {\n              error: _context3.t0\n            });\n\n            return _context3.abrupt(\"return\");\n\n          case 10:\n            success = response.status >= 200 && response.status < 300;\n\n            if (!success) {\n              _transportEventEmitter.emit('error', {\n                error: new Error(\"An HTTP error occurred when sending remote logs\"),\n                response: response\n              });\n            }\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this, [[0, 6]]);\n  }\n\n  function addTransportErrorListener(listener) {\n    return _transportEventEmitter.addListener('error', listener);\n  }\n\n  function _isReactNativeWarning(data) {\n    var message = data[0];\n    return data.length === 1 && typeof message === 'string' && message.startsWith('Warning: ');\n  }\n\n  var _default = {\n    enqueueRemoteLogAsync: enqueueRemoteLogAsync,\n    addTransportErrorListener: addTransportErrorListener\n  };\n  exports.default = _default;\n\n  function __waitForEmptyLogQueueAsync() {\n    if (_completionPromise) {\n      return _completionPromise;\n    }\n\n    if (!_isSendingLogs && !_logQueue.length) {\n      return Promise.resolve();\n    }\n\n    _completionPromise = new Promise(function (resolve) {\n      _resolveCompletion2 = function _resolveCompletion() {\n        (0, _invariant.default)(!_isSendingLogs, \"Must not be sending logs at completion\");\n        (0, _invariant.default)(!_logQueue.length, \"Log queue must be empty at completion\");\n        _completionPromise = null;\n        _resolveCompletion2 = null;\n        resolve();\n      };\n    });\n    return _completionPromise;\n  }\n});","map":[[14,0,1,0],[16,0,2,0],[18,0,3,0],[20,0,4,0],[22,0,5,0],[24,0,6,0],[24,6,6,6,"_sessionId"],[24,16,6,16],[24,19,6,19,"UUID"],[24,35,6,24,"create"],[24,41,6,19],[24,44,6,33,"toString"],[24,52,6,19],[24,54,6,0],[26,0,7,0],[26,6,7,6,"_logQueue"],[26,15,7,15],[26,18,7,18],[26,20,7,0],[28,0,8,0],[28,6,8,6,"_transportEventEmitter"],[28,28,8,28],[28,31,8,31],[28,35,8,35,"EventEmitter"],[28,58,8,31],[28,60,8,0],[30,0,9,0],[30,6,9,4,"_logCounter"],[30,17,9,15],[30,20,9,18],[30,21,9,0],[31,0,10,0],[31,6,10,4,"_isSendingLogs"],[31,20,10,18],[31,23,10,21],[31,28,10,0],[32,0,11,0],[32,6,11,4,"_completionPromise"],[32,24,11,22],[32,27,11,25],[32,31,11,0],[33,0,12,0],[33,6,12,4,"_resolveCompletion"],[33,25,12,22],[33,28,12,25],[33,32,12,0],[35,0,13,0],[35,11,13,15,"enqueueRemoteLogAsync"],[35,32,13,0],[35,33,13,37,"level"],[35,38,13,0],[35,40,13,44,"additionalFields"],[35,56,13,0],[35,58,13,62,"data"],[35,62,13,0],[36,0,13,0],[38,0,13,0],[39,0,13,0],[40,0,13,0],[41,0,13,0],[42,0,13,0],[42,17,14,8,"_isReactNativeWarning"],[42,38,14,29],[42,39,14,30,"data"],[42,43,14,29],[42,44,13,0],[43,0,13,0],[44,0,13,0],[45,0,13,0],[47,0,13,0],[47,18,16,12,"data"],[47,22,16,16],[47,23,16,17,"length"],[47,29,16,12],[47,34,16,28],[47,35,13,0],[48,0,13,0],[49,0,13,0],[50,0,13,0],[52,0,13,0],[52,18,17,18],[52,22,17,22,"Error"],[52,27,17,18],[52,66,13,0],[54,0,13,0],[55,0,19,14,"warning"],[55,12,19,14,"warning"],[55,19,13,0],[55,22,19,24,"data"],[55,26,19,28],[55,27,19,29],[55,28,19,28],[55,29,13,0],[57,0,13,0],[57,18,20,12],[57,25,20,19,"warning"],[57,32,20,12],[57,37,20,31],[57,45,13,0],[58,0,13,0],[59,0,13,0],[60,0,13,0],[62,0,13,0],[62,18,21,18],[62,22,21,22,"TypeError"],[62,31,21,18],[62,82,13,0],[64,0,13,0],[65,0,23,14,"lines"],[65,12,23,14,"lines"],[65,17,13,0],[65,20,23,22,"warning"],[65,27,23,29],[65,28,23,30,"split"],[65,33,23,22],[65,34,23,36],[65,38,23,22],[65,39,13,0],[67,0,24,8],[67,16,24,12,"lines"],[67,21,24,17],[67,22,24,18,"length"],[67,28,24,12],[67,31,24,27],[67,32,24,12],[67,36,24,32],[67,46,24,42,"test"],[67,50,24,32],[67,51,24,47,"lines"],[67,56,24,52],[67,57,24,53],[67,58,24,52],[67,59,24,32],[67,60,24,8],[67,62,24,58],[68,0,25,12,"data"],[68,14,25,12,"data"],[68,18,25,16],[68,19,25,17],[68,20,25,16],[68,21,25,12],[68,24,25,22,"lines"],[68,29,25,27],[68,30,25,28],[68,31,25,27],[68,32,25,12],[69,0,26,9],[71,0,13,0],[72,0,13,0],[73,0,13,0],[73,46,28,40,"LogSerialization"],[73,72,28,57,"serializeLogDataAsync"],[73,93,28,40],[73,94,28,79,"data"],[73,98,28,40],[73,100,28,85,"level"],[73,105,28,40],[73,106,13,0],[75,0,13,0],[76,0,13,0],[77,0,28,10,"body"],[77,12,28,10,"body"],[77,16,13,0],[77,24,28,10,"body"],[77,28,13,0],[78,0,28,16,"includesStack"],[78,12,28,16,"includesStack"],[78,25,13,0],[78,33,28,16,"includesStack"],[78,46,13,0],[80,0,29,4,"_logQueue"],[80,12,29,4,"_logQueue"],[80,21,29,13],[80,22,29,14,"push"],[80,26,29,4],[81,0,30,8,"count"],[81,14,30,8,"count"],[81,19,30,13],[81,21,30,15,"_logCounter"],[81,32,30,26],[81,34,29,4],[82,0,31,8,"level"],[82,14,31,8,"level"],[82,19,31,13],[82,21,31,8,"level"],[82,26,29,4],[83,0,32,8,"body"],[83,14,32,8,"body"],[83,18,32,12],[83,20,32,8,"body"],[83,24,29,4],[84,0,33,8,"includesStack"],[84,14,33,8,"includesStack"],[84,27,33,21],[84,29,33,8,"includesStack"],[85,0,29,4],[85,15,34,11,"additionalFields"],[85,31,29,4],[87,0,37,4,"_sendRemoteLogsAsync"],[87,12,37,4,"_sendRemoteLogsAsync"],[87,32,37,24],[87,35,37,27,"catch"],[87,40,37,4],[87,41,37,33],[87,51,37,33,"error"],[87,56,37,38],[87,58,37,42],[88,0,38,8,"setImmediate"],[88,14,38,8,"setImmediate"],[88,26,38,20],[88,27,38,21],[88,39,38,27],[89,0,39,12],[89,22,39,18,"error"],[89,27,39,12],[90,0,40,9],[90,15,38,20],[90,16,38,8],[91,0,41,5],[91,13,37,4],[93,0,13,0],[94,0,13,0],[95,0,13,0],[96,0,13,0],[97,0,13,0],[98,0,13,0],[99,0,13,0],[101,0,43,0],[101,11,43,15,"_sendRemoteLogsAsync"],[101,31,43,0],[102,0,43,0],[103,0,43,0],[104,0,43,0],[105,0,43,0],[106,0,43,0],[107,0,43,0],[107,18,44,8,"_isSendingLogs"],[107,32,44,22],[107,36,44,26],[107,37,44,27,"_logQueue"],[107,46,44,36],[107,47,44,37,"length"],[107,53,43,0],[108,0,43,0],[109,0,43,0],[110,0,43,0],[112,0,43,0],[114,0,43,0],[115,0,49,8,"batch"],[115,12,49,8,"batch"],[115,17,43,0],[115,20,49,16,"_logQueue"],[115,29,49,25],[115,30,49,26,"splice"],[115,36,49,16],[115,37,49,33],[115,38,49,16],[115,39,43,0],[116,0,50,10,"logUrl"],[116,12,50,10,"logUrl"],[116,18,43,0],[116,21,50,21,"Constants"],[116,44,50,31,"manifest"],[116,52,43,0],[116,53,50,10,"logUrl"],[116,59,43,0],[117,0,51,4],[117,36,51,14],[117,43,51,21,"logUrl"],[117,49,51,14],[117,54,51,32],[117,62,51,4],[117,64,51,42],[117,113,51,4],[118,0,52,4,"_isSendingLogs"],[118,12,52,4,"_isSendingLogs"],[118,26,52,18],[118,29,52,21],[118,33,52,4],[119,0,43,0],[120,0,43,0],[121,0,43,0],[121,46,54,14,"_sendNextLogBatchAsync"],[121,68,54,36],[121,69,54,37,"batch"],[121,74,54,36],[121,76,54,44,"logUrl"],[121,82,54,36],[121,83,43,0],[123,0,43,0],[124,0,43,0],[125,0,57,8,"_isSendingLogs"],[125,12,57,8,"_isSendingLogs"],[125,26,57,22],[125,29,57,25],[125,34,57,8],[126,0,43,0],[128,0,43,0],[129,0,43,0],[129,17,59,8,"_logQueue"],[129,26,59,17],[129,27,59,18,"length"],[129,33,43,0],[130,0,43,0],[131,0,43,0],[132,0,43,0],[134,0,43,0],[134,46,60,15,"_sendRemoteLogsAsync"],[134,66,60,35],[134,68,43,0],[136,0,43,0],[137,0,62,9],[137,16,62,13,"_resolveCompletion"],[137,35,62,9],[137,37,62,33],[138,0,63,8,"_resolveCompletion"],[138,14,63,8,"_resolveCompletion"],[138,33,63,26],[139,0,64,5],[141,0,43,0],[142,0,43,0],[143,0,43,0],[144,0,43,0],[145,0,43,0],[146,0,43,0],[147,0,43,0],[149,0,66,0],[149,11,66,15,"_sendNextLogBatchAsync"],[149,33,66,0],[149,34,66,38,"batch"],[149,39,66,0],[149,41,66,45,"logUrl"],[149,47,66,0],[150,0,66,0],[151,0,66,0],[152,0,66,0],[153,0,66,0],[154,0,66,0],[155,0,66,0],[156,0,66,0],[157,0,66,0],[157,46,69,25,"fetch"],[157,51,69,30],[157,52,69,31,"logUrl"],[157,58,69,30],[157,60,69,39],[158,0,70,12,"method"],[158,14,70,12,"method"],[158,20,70,18],[158,22,70,20],[158,28,69,39],[159,0,71,12,"headers"],[159,14,71,12,"headers"],[159,21,71,19],[159,23,71,21],[160,0,72,16],[160,32,72,32],[160,50,71,21],[161,0,73,16,"Connection"],[161,16,73,16,"Connection"],[161,26,73,26],[161,28,73,28],[161,40,71,21],[162,0,74,16],[162,36,74,36],[162,48,71,21],[163,0,75,16,"Accept"],[163,16,75,16,"Accept"],[163,22,75,22],[163,24,75,24],[163,42,71,21],[164,0,76,16],[164,29,76,29,"Constants"],[164,52,76,39,"installationId"],[164,66,71,21],[165,0,77,16],[165,31,77,31,"Constants"],[165,54,77,41,"deviceName"],[165,64,71,21],[166,0,78,16],[166,30,78,30,"_sessionId"],[167,0,71,21],[167,15,69,39],[168,0,80,12,"body"],[168,14,80,12,"body"],[168,18,80,16],[168,20,80,18,"JSON"],[168,24,80,22],[168,25,80,23,"stringify"],[168,34,80,18],[168,35,80,33,"batch"],[168,40,80,18],[169,0,69,39],[169,13,69,30],[169,14,66,0],[171,0,66,0],[172,0,69,8,"response"],[172,12,69,8,"response"],[172,20,66,0],[173,0,66,0],[174,0,66,0],[176,0,66,0],[177,0,66,0],[178,0,66,0],[180,0,84,8,"_transportEventEmitter"],[180,12,84,8,"_transportEventEmitter"],[180,34,84,30],[180,35,84,31,"emit"],[180,39,84,8],[180,40,84,36],[180,47,84,8],[180,49,84,45],[181,0,84,47,"error"],[181,14,84,47,"error"],[181,19,84,52],[182,0,84,45],[182,13,84,8],[184,0,66,0],[186,0,66,0],[187,0,87,8,"success"],[187,12,87,8,"success"],[187,19,66,0],[187,22,87,18,"response"],[187,30,87,26],[187,31,87,27,"status"],[187,37,87,18],[187,41,87,37],[187,44,87,18],[187,48,87,44,"response"],[187,56,87,52],[187,57,87,53,"status"],[187,63,87,44],[187,66,87,62],[187,69,66,0],[189,0,88,4],[189,16,88,8],[189,17,88,9,"success"],[189,24,88,4],[189,26,88,18],[190,0,89,8,"_transportEventEmitter"],[190,14,89,8,"_transportEventEmitter"],[190,36,89,30],[190,37,89,31,"emit"],[190,41,89,8],[190,42,89,36],[190,49,89,8],[190,51,89,45],[191,0,90,12,"error"],[191,16,90,12,"error"],[191,21,90,17],[191,23,90,19],[191,27,90,23,"Error"],[191,32,90,19],[191,83,89,45],[192,0,91,12,"response"],[192,16,91,12,"response"],[192,24,91,20],[192,26,91,12,"response"],[193,0,89,45],[193,15,89,8],[194,0,93,5],[196,0,66,0],[197,0,66,0],[198,0,66,0],[199,0,66,0],[200,0,66,0],[201,0,66,0],[202,0,66,0],[204,0,95,0],[204,11,95,9,"addTransportErrorListener"],[204,36,95,0],[204,37,95,35,"listener"],[204,45,95,0],[204,47,95,45],[205,0,96,4],[205,11,96,11,"_transportEventEmitter"],[205,33,96,33],[205,34,96,34,"addListener"],[205,45,96,11],[205,46,96,46],[205,53,96,11],[205,55,96,55,"listener"],[205,63,96,11],[205,64,96,4],[206,0,97,1],[208,0,98,0],[208,11,98,9,"_isReactNativeWarning"],[208,32,98,0],[208,33,98,31,"data"],[208,37,98,0],[208,39,98,37],[209,0,100,4],[209,8,100,8,"message"],[209,15,100,15],[209,18,100,18,"data"],[209,22,100,22],[209,23,100,23],[209,24,100,22],[209,25,100,4],[210,0,101,4],[210,11,101,11,"data"],[210,15,101,15],[210,16,101,16,"length"],[210,22,101,11],[210,27,101,27],[210,28,101,11],[210,32,101,32],[210,39,101,39,"message"],[210,46,101,32],[210,51,101,51],[210,59,101,11],[210,63,101,63,"message"],[210,70,101,70],[210,71,101,71,"startsWith"],[210,81,101,63],[210,82,101,82],[210,93,101,63],[210,94,101,4],[211,0,102,1],[213,17,103,15],[214,0,104,4,"enqueueRemoteLogAsync"],[214,4,104,4,"enqueueRemoteLogAsync"],[214,25,104,25],[214,27,104,4,"enqueueRemoteLogAsync"],[214,48,103,15],[215,0,105,4,"addTransportErrorListener"],[215,4,105,4,"addTransportErrorListener"],[215,29,105,29],[215,31,105,4,"addTransportErrorListener"],[216,0,103,15],[216,3],[219,0,111,7],[219,11,111,16,"__waitForEmptyLogQueueAsync"],[219,38,111,7],[219,41,111,46],[220,0,112,4],[220,8,112,8,"_completionPromise"],[220,26,112,4],[220,28,112,28],[221,0,113,8],[221,13,113,15,"_completionPromise"],[221,31,113,8],[222,0,114,5],[224,0,115,4],[224,8,115,8],[224,9,115,9,"_isSendingLogs"],[224,23,115,8],[224,27,115,27],[224,28,115,28,"_logQueue"],[224,37,115,37],[224,38,115,38,"length"],[224,44,115,4],[224,46,115,46],[225,0,116,8],[225,13,116,15,"Promise"],[225,20,116,22],[225,21,116,23,"resolve"],[225,28,116,15],[225,30,116,8],[226,0,117,5],[228,0,118,4,"_completionPromise"],[228,4,118,4,"_completionPromise"],[228,22,118,22],[228,25,118,25],[228,29,118,29,"Promise"],[228,36,118,25],[228,37,118,37],[228,47,118,37,"resolve"],[228,54,118,44],[228,56,118,48],[229,0,119,8,"_resolveCompletion"],[229,6,119,8,"_resolveCompletion"],[229,25,119,26],[229,28,119,29],[229,58,119,35],[230,0,120,12],[230,32,120,22],[230,33,120,23,"_isSendingLogs"],[230,47,120,12],[231,0,121,12],[231,32,121,22],[231,33,121,23,"_logQueue"],[231,42,121,32],[231,43,121,33,"length"],[231,49,121,12],[232,0,122,12,"_completionPromise"],[232,8,122,12,"_completionPromise"],[232,26,122,30],[232,29,122,33],[232,33,122,12],[233,0,123,12,"_resolveCompletion"],[233,8,123,12,"_resolveCompletion"],[233,27,123,30],[233,30,123,33],[233,34,123,12],[234,0,124,12,"resolve"],[234,8,124,12,"resolve"],[234,15,124,19],[235,0,125,9],[235,7,119,8],[236,0,126,5],[236,5,118,25],[236,6,118,4],[237,0,127,4],[237,11,127,11,"_completionPromise"],[237,29,127,4],[238,0,128,1]]},"type":"js/module"}]}